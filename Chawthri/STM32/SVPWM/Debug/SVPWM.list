
SVPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004688  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c30  08004c30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c38  08004c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c38  08004c38  00014c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08004c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004c4c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9b2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d48  00000000  00000000  0002c9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002e738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a08  00000000  00000000  0002f248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025824  00000000  00000000  0002fc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fdc  00000000  00000000  00055474  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e80b1  00000000  00000000  0005e450  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146501  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb4  00000000  00000000  0014657c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004838 	.word	0x08004838

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004838 	.word	0x08004838

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b972 	b.w	800091c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9e08      	ldr	r6, [sp, #32]
 8000656:	4604      	mov	r4, r0
 8000658:	4688      	mov	r8, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d14b      	bne.n	80006f6 <__udivmoddi4+0xa6>
 800065e:	428a      	cmp	r2, r1
 8000660:	4615      	mov	r5, r2
 8000662:	d967      	bls.n	8000734 <__udivmoddi4+0xe4>
 8000664:	fab2 f282 	clz	r2, r2
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0720 	rsb	r7, r2, #32
 800066e:	fa01 f302 	lsl.w	r3, r1, r2
 8000672:	fa20 f707 	lsr.w	r7, r0, r7
 8000676:	4095      	lsls	r5, r2
 8000678:	ea47 0803 	orr.w	r8, r7, r3
 800067c:	4094      	lsls	r4, r2
 800067e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000682:	0c23      	lsrs	r3, r4, #16
 8000684:	fbb8 f7fe 	udiv	r7, r8, lr
 8000688:	fa1f fc85 	uxth.w	ip, r5
 800068c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000690:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000694:	fb07 f10c 	mul.w	r1, r7, ip
 8000698:	4299      	cmp	r1, r3
 800069a:	d909      	bls.n	80006b0 <__udivmoddi4+0x60>
 800069c:	18eb      	adds	r3, r5, r3
 800069e:	f107 30ff 	add.w	r0, r7, #4294967295
 80006a2:	f080 811b 	bcs.w	80008dc <__udivmoddi4+0x28c>
 80006a6:	4299      	cmp	r1, r3
 80006a8:	f240 8118 	bls.w	80008dc <__udivmoddi4+0x28c>
 80006ac:	3f02      	subs	r7, #2
 80006ae:	442b      	add	r3, r5
 80006b0:	1a5b      	subs	r3, r3, r1
 80006b2:	b2a4      	uxth	r4, r4
 80006b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80006c4:	45a4      	cmp	ip, r4
 80006c6:	d909      	bls.n	80006dc <__udivmoddi4+0x8c>
 80006c8:	192c      	adds	r4, r5, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ce:	f080 8107 	bcs.w	80008e0 <__udivmoddi4+0x290>
 80006d2:	45a4      	cmp	ip, r4
 80006d4:	f240 8104 	bls.w	80008e0 <__udivmoddi4+0x290>
 80006d8:	3802      	subs	r0, #2
 80006da:	442c      	add	r4, r5
 80006dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006e0:	eba4 040c 	sub.w	r4, r4, ip
 80006e4:	2700      	movs	r7, #0
 80006e6:	b11e      	cbz	r6, 80006f0 <__udivmoddi4+0xa0>
 80006e8:	40d4      	lsrs	r4, r2
 80006ea:	2300      	movs	r3, #0
 80006ec:	e9c6 4300 	strd	r4, r3, [r6]
 80006f0:	4639      	mov	r1, r7
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d909      	bls.n	800070e <__udivmoddi4+0xbe>
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	f000 80eb 	beq.w	80008d6 <__udivmoddi4+0x286>
 8000700:	2700      	movs	r7, #0
 8000702:	e9c6 0100 	strd	r0, r1, [r6]
 8000706:	4638      	mov	r0, r7
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	fab3 f783 	clz	r7, r3
 8000712:	2f00      	cmp	r7, #0
 8000714:	d147      	bne.n	80007a6 <__udivmoddi4+0x156>
 8000716:	428b      	cmp	r3, r1
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0xd0>
 800071a:	4282      	cmp	r2, r0
 800071c:	f200 80fa 	bhi.w	8000914 <__udivmoddi4+0x2c4>
 8000720:	1a84      	subs	r4, r0, r2
 8000722:	eb61 0303 	sbc.w	r3, r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	4698      	mov	r8, r3
 800072a:	2e00      	cmp	r6, #0
 800072c:	d0e0      	beq.n	80006f0 <__udivmoddi4+0xa0>
 800072e:	e9c6 4800 	strd	r4, r8, [r6]
 8000732:	e7dd      	b.n	80006f0 <__udivmoddi4+0xa0>
 8000734:	b902      	cbnz	r2, 8000738 <__udivmoddi4+0xe8>
 8000736:	deff      	udf	#255	; 0xff
 8000738:	fab2 f282 	clz	r2, r2
 800073c:	2a00      	cmp	r2, #0
 800073e:	f040 808f 	bne.w	8000860 <__udivmoddi4+0x210>
 8000742:	1b49      	subs	r1, r1, r5
 8000744:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000748:	fa1f f885 	uxth.w	r8, r5
 800074c:	2701      	movs	r7, #1
 800074e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000752:	0c23      	lsrs	r3, r4, #16
 8000754:	fb0e 111c 	mls	r1, lr, ip, r1
 8000758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800075c:	fb08 f10c 	mul.w	r1, r8, ip
 8000760:	4299      	cmp	r1, r3
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x124>
 8000764:	18eb      	adds	r3, r5, r3
 8000766:	f10c 30ff 	add.w	r0, ip, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x122>
 800076c:	4299      	cmp	r1, r3
 800076e:	f200 80cd 	bhi.w	800090c <__udivmoddi4+0x2bc>
 8000772:	4684      	mov	ip, r0
 8000774:	1a59      	subs	r1, r3, r1
 8000776:	b2a3      	uxth	r3, r4
 8000778:	fbb1 f0fe 	udiv	r0, r1, lr
 800077c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000780:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000784:	fb08 f800 	mul.w	r8, r8, r0
 8000788:	45a0      	cmp	r8, r4
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x14c>
 800078c:	192c      	adds	r4, r5, r4
 800078e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x14a>
 8000794:	45a0      	cmp	r8, r4
 8000796:	f200 80b6 	bhi.w	8000906 <__udivmoddi4+0x2b6>
 800079a:	4618      	mov	r0, r3
 800079c:	eba4 0408 	sub.w	r4, r4, r8
 80007a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007a4:	e79f      	b.n	80006e6 <__udivmoddi4+0x96>
 80007a6:	f1c7 0c20 	rsb	ip, r7, #32
 80007aa:	40bb      	lsls	r3, r7
 80007ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007b4:	fa01 f407 	lsl.w	r4, r1, r7
 80007b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80007c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007c4:	4325      	orrs	r5, r4
 80007c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80007ca:	0c2c      	lsrs	r4, r5, #16
 80007cc:	fb08 3319 	mls	r3, r8, r9, r3
 80007d0:	fa1f fa8e 	uxth.w	sl, lr
 80007d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007d8:	fb09 f40a 	mul.w	r4, r9, sl
 80007dc:	429c      	cmp	r4, r3
 80007de:	fa02 f207 	lsl.w	r2, r2, r7
 80007e2:	fa00 f107 	lsl.w	r1, r0, r7
 80007e6:	d90b      	bls.n	8000800 <__udivmoddi4+0x1b0>
 80007e8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80007f0:	f080 8087 	bcs.w	8000902 <__udivmoddi4+0x2b2>
 80007f4:	429c      	cmp	r4, r3
 80007f6:	f240 8084 	bls.w	8000902 <__udivmoddi4+0x2b2>
 80007fa:	f1a9 0902 	sub.w	r9, r9, #2
 80007fe:	4473      	add	r3, lr
 8000800:	1b1b      	subs	r3, r3, r4
 8000802:	b2ad      	uxth	r5, r5
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3310 	mls	r3, r8, r0, r3
 800080c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000810:	fb00 fa0a 	mul.w	sl, r0, sl
 8000814:	45a2      	cmp	sl, r4
 8000816:	d908      	bls.n	800082a <__udivmoddi4+0x1da>
 8000818:	eb1e 0404 	adds.w	r4, lr, r4
 800081c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000820:	d26b      	bcs.n	80008fa <__udivmoddi4+0x2aa>
 8000822:	45a2      	cmp	sl, r4
 8000824:	d969      	bls.n	80008fa <__udivmoddi4+0x2aa>
 8000826:	3802      	subs	r0, #2
 8000828:	4474      	add	r4, lr
 800082a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800082e:	fba0 8902 	umull	r8, r9, r0, r2
 8000832:	eba4 040a 	sub.w	r4, r4, sl
 8000836:	454c      	cmp	r4, r9
 8000838:	46c2      	mov	sl, r8
 800083a:	464b      	mov	r3, r9
 800083c:	d354      	bcc.n	80008e8 <__udivmoddi4+0x298>
 800083e:	d051      	beq.n	80008e4 <__udivmoddi4+0x294>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d069      	beq.n	8000918 <__udivmoddi4+0x2c8>
 8000844:	ebb1 050a 	subs.w	r5, r1, sl
 8000848:	eb64 0403 	sbc.w	r4, r4, r3
 800084c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000850:	40fd      	lsrs	r5, r7
 8000852:	40fc      	lsrs	r4, r7
 8000854:	ea4c 0505 	orr.w	r5, ip, r5
 8000858:	e9c6 5400 	strd	r5, r4, [r6]
 800085c:	2700      	movs	r7, #0
 800085e:	e747      	b.n	80006f0 <__udivmoddi4+0xa0>
 8000860:	f1c2 0320 	rsb	r3, r2, #32
 8000864:	fa20 f703 	lsr.w	r7, r0, r3
 8000868:	4095      	lsls	r5, r2
 800086a:	fa01 f002 	lsl.w	r0, r1, r2
 800086e:	fa21 f303 	lsr.w	r3, r1, r3
 8000872:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000876:	4338      	orrs	r0, r7
 8000878:	0c01      	lsrs	r1, r0, #16
 800087a:	fbb3 f7fe 	udiv	r7, r3, lr
 800087e:	fa1f f885 	uxth.w	r8, r5
 8000882:	fb0e 3317 	mls	r3, lr, r7, r3
 8000886:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088a:	fb07 f308 	mul.w	r3, r7, r8
 800088e:	428b      	cmp	r3, r1
 8000890:	fa04 f402 	lsl.w	r4, r4, r2
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0x256>
 8000896:	1869      	adds	r1, r5, r1
 8000898:	f107 3cff 	add.w	ip, r7, #4294967295
 800089c:	d22f      	bcs.n	80008fe <__udivmoddi4+0x2ae>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d92d      	bls.n	80008fe <__udivmoddi4+0x2ae>
 80008a2:	3f02      	subs	r7, #2
 80008a4:	4429      	add	r1, r5
 80008a6:	1acb      	subs	r3, r1, r3
 80008a8:	b281      	uxth	r1, r0
 80008aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b6:	fb00 f308 	mul.w	r3, r0, r8
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x27e>
 80008be:	1869      	adds	r1, r5, r1
 80008c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c4:	d217      	bcs.n	80008f6 <__udivmoddi4+0x2a6>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d915      	bls.n	80008f6 <__udivmoddi4+0x2a6>
 80008ca:	3802      	subs	r0, #2
 80008cc:	4429      	add	r1, r5
 80008ce:	1ac9      	subs	r1, r1, r3
 80008d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008d4:	e73b      	b.n	800074e <__udivmoddi4+0xfe>
 80008d6:	4637      	mov	r7, r6
 80008d8:	4630      	mov	r0, r6
 80008da:	e709      	b.n	80006f0 <__udivmoddi4+0xa0>
 80008dc:	4607      	mov	r7, r0
 80008de:	e6e7      	b.n	80006b0 <__udivmoddi4+0x60>
 80008e0:	4618      	mov	r0, r3
 80008e2:	e6fb      	b.n	80006dc <__udivmoddi4+0x8c>
 80008e4:	4541      	cmp	r1, r8
 80008e6:	d2ab      	bcs.n	8000840 <__udivmoddi4+0x1f0>
 80008e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ec:	eb69 020e 	sbc.w	r2, r9, lr
 80008f0:	3801      	subs	r0, #1
 80008f2:	4613      	mov	r3, r2
 80008f4:	e7a4      	b.n	8000840 <__udivmoddi4+0x1f0>
 80008f6:	4660      	mov	r0, ip
 80008f8:	e7e9      	b.n	80008ce <__udivmoddi4+0x27e>
 80008fa:	4618      	mov	r0, r3
 80008fc:	e795      	b.n	800082a <__udivmoddi4+0x1da>
 80008fe:	4667      	mov	r7, ip
 8000900:	e7d1      	b.n	80008a6 <__udivmoddi4+0x256>
 8000902:	4681      	mov	r9, r0
 8000904:	e77c      	b.n	8000800 <__udivmoddi4+0x1b0>
 8000906:	3802      	subs	r0, #2
 8000908:	442c      	add	r4, r5
 800090a:	e747      	b.n	800079c <__udivmoddi4+0x14c>
 800090c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000910:	442b      	add	r3, r5
 8000912:	e72f      	b.n	8000774 <__udivmoddi4+0x124>
 8000914:	4638      	mov	r0, r7
 8000916:	e708      	b.n	800072a <__udivmoddi4+0xda>
 8000918:	4637      	mov	r7, r6
 800091a:	e6e9      	b.n	80006f0 <__udivmoddi4+0xa0>

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <Count_Up>:
 */

#include "LEDS.h"
#include "main.h"

void Count_Up(SVPWM *svm, int OldSector){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	if(svm->SectorPointer == 0 && svm->SectorPointer != OldSector) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000930:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	d11d      	bne.n	8000976 <Count_Up+0x56>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800094a:	eeb4 7a67 	vcmp.f32	s14, s15
 800094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000952:	d010      	beq.n	8000976 <Count_Up+0x56>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2101      	movs	r1, #1
 8000958:	486d      	ldr	r0, [pc, #436]	; (8000b10 <Count_Up+0x1f0>)
 800095a:	f001 fb21 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	486b      	ldr	r0, [pc, #428]	; (8000b10 <Count_Up+0x1f0>)
 8000964:	f001 fb1c 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096e:	4868      	ldr	r0, [pc, #416]	; (8000b10 <Count_Up+0x1f0>)
 8000970:	f001 fb16 	bl	8001fa0 <HAL_GPIO_WritePin>
 8000974:	e0c7      	b.n	8000b06 <Count_Up+0x1e6>
	}
	else if(svm->SectorPointer == 1 && svm->SectorPointer != OldSector) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	edd3 7a05 	vldr	s15, [r3, #20]
 800097c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000980:	eef4 7a47 	vcmp.f32	s15, s14
 8000984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000988:	d11d      	bne.n	80009c6 <Count_Up+0xa6>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	ee07 3a90 	vmov	s15, r3
 8000996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099a:	eeb4 7a67 	vcmp.f32	s14, s15
 800099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a2:	d010      	beq.n	80009c6 <Count_Up+0xa6>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	4859      	ldr	r0, [pc, #356]	; (8000b10 <Count_Up+0x1f0>)
 80009aa:	f001 faf9 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	4857      	ldr	r0, [pc, #348]	; (8000b10 <Count_Up+0x1f0>)
 80009b4:	f001 faf4 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009be:	4854      	ldr	r0, [pc, #336]	; (8000b10 <Count_Up+0x1f0>)
 80009c0:	f001 faee 	bl	8001fa0 <HAL_GPIO_WritePin>
 80009c4:	e09f      	b.n	8000b06 <Count_Up+0x1e6>
	}
	else if(svm->SectorPointer == 2 && svm->SectorPointer != OldSector) {
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80009cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80009d0:	eef4 7a47 	vcmp.f32	s15, s14
 80009d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d8:	d11d      	bne.n	8000a16 <Count_Up+0xf6>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	ee07 3a90 	vmov	s15, r3
 80009e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80009ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f2:	d010      	beq.n	8000a16 <Count_Up+0xf6>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	4845      	ldr	r0, [pc, #276]	; (8000b10 <Count_Up+0x1f0>)
 80009fa:	f001 fad1 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	4843      	ldr	r0, [pc, #268]	; (8000b10 <Count_Up+0x1f0>)
 8000a04:	f001 facc 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	4840      	ldr	r0, [pc, #256]	; (8000b10 <Count_Up+0x1f0>)
 8000a10:	f001 fac6 	bl	8001fa0 <HAL_GPIO_WritePin>
 8000a14:	e077      	b.n	8000b06 <Count_Up+0x1e6>
	}
	else if(svm->SectorPointer == 3 && svm->SectorPointer != OldSector) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a1c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000a20:	eef4 7a47 	vcmp.f32	s15, s14
 8000a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a28:	d11d      	bne.n	8000a66 <Count_Up+0x146>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3a:	eeb4 7a67 	vcmp.f32	s14, s15
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	d010      	beq.n	8000a66 <Count_Up+0x146>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2101      	movs	r1, #1
 8000a48:	4831      	ldr	r0, [pc, #196]	; (8000b10 <Count_Up+0x1f0>)
 8000a4a:	f001 faa9 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	482f      	ldr	r0, [pc, #188]	; (8000b10 <Count_Up+0x1f0>)
 8000a54:	f001 faa4 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5e:	482c      	ldr	r0, [pc, #176]	; (8000b10 <Count_Up+0x1f0>)
 8000a60:	f001 fa9e 	bl	8001fa0 <HAL_GPIO_WritePin>
 8000a64:	e04f      	b.n	8000b06 <Count_Up+0x1e6>
	}
	else if(svm->SectorPointer == 4 && svm->SectorPointer != OldSector) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a6c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000a70:	eef4 7a47 	vcmp.f32	s15, s14
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	d11d      	bne.n	8000ab6 <Count_Up+0x196>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8a:	eeb4 7a67 	vcmp.f32	s14, s15
 8000a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a92:	d010      	beq.n	8000ab6 <Count_Up+0x196>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2101      	movs	r1, #1
 8000a98:	481d      	ldr	r0, [pc, #116]	; (8000b10 <Count_Up+0x1f0>)
 8000a9a:	f001 fa81 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	481b      	ldr	r0, [pc, #108]	; (8000b10 <Count_Up+0x1f0>)
 8000aa4:	f001 fa7c 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aae:	4818      	ldr	r0, [pc, #96]	; (8000b10 <Count_Up+0x1f0>)
 8000ab0:	f001 fa76 	bl	8001fa0 <HAL_GPIO_WritePin>
 8000ab4:	e027      	b.n	8000b06 <Count_Up+0x1e6>
	}
	else if(svm->SectorPointer == 5 && svm->SectorPointer != OldSector) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000abc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000ac0:	eef4 7a47 	vcmp.f32	s15, s14
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d11d      	bne.n	8000b06 <Count_Up+0x1e6>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	ed93 7a05 	vldr	s14, [r3, #20]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	ee07 3a90 	vmov	s15, r3
 8000ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ada:	eeb4 7a67 	vcmp.f32	s14, s15
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d010      	beq.n	8000b06 <Count_Up+0x1e6>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <Count_Up+0x1f0>)
 8000aea:	f001 fa59 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <Count_Up+0x1f0>)
 8000af4:	f001 fa54 	bl	8001fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <Count_Up+0x1f0>)
 8000b00:	f001 fa4e 	bl	8001fa0 <HAL_GPIO_WritePin>
	}
}
 8000b04:	e7ff      	b.n	8000b06 <Count_Up+0x1e6>
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40020400 	.word	0x40020400

08000b14 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid, float Kp, float Ki, float LimMin, float LimMax, float LimMinInt, float LimMaxInt, float T) {
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	61f8      	str	r0, [r7, #28]
 8000b1c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000b20:	edc7 0a05 	vstr	s1, [r7, #20]
 8000b24:	ed87 1a04 	vstr	s2, [r7, #16]
 8000b28:	edc7 1a03 	vstr	s3, [r7, #12]
 8000b2c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000b30:	edc7 2a01 	vstr	s5, [r7, #4]
 8000b34:	ed87 3a00 	vstr	s6, [r7]
	/* Clear controller variables */
	pid->Integrator = 0.0f;
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
	pid->PrevError  = 0.0f;
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
	pid->Out = 0.0f;
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f04f 0200 	mov.w	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Kp = Kp;
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	605a      	str	r2, [r3, #4]
	pid->LimMin = LimMin;
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	609a      	str	r2, [r3, #8]
	pid->LimMax = LimMax;
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	60da      	str	r2, [r3, #12]
	pid->LimMinInt = LimMinInt;
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	611a      	str	r2, [r3, #16]
	pid->LimMaxInt = LimMaxInt;
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	615a      	str	r2, [r3, #20]
}
 8000b74:	bf00      	nop
 8000b76:	3724      	adds	r7, #36	; 0x24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f04f 0200 	mov.w	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f04f 0200 	mov.w	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f04f 0200 	mov.w	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 1; /*vhz->Volt / vhz->VoltRated;*/
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c1a:	601a      	str	r2, [r3, #0]
	svm->Freq = 5; /*vhz->Freq;*/
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4ab9      	ldr	r2, [pc, #740]	; (8000f04 <SVPWM_Update+0x2fc>)
 8000c20:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c28:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8000f08 <SVPWM_Update+0x300>
 8000c2c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	691a      	ldr	r2, [r3, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c64:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8000f0c <SVPWM_Update+0x304>
 8000c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c70:	db09      	blt.n	8000c86 <SVPWM_Update+0x7e>
		svm->Alpha = svm->Alpha-PI_THIRD;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c78:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8000f0c <SVPWM_Update+0x304>
 8000c7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c94:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8000f0c <SVPWM_Update+0x304>
 8000c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca0:	f003 f87e 	bl	8003da0 <sinf>
 8000ca4:	eeb0 7a40 	vmov.f32	s14, s0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	edd3 7a00 	vldr	s15, [r3]
 8000cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ccc:	f003 f868 	bl	8003da0 <sinf>
 8000cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	d518      	bpl.n	8000d62 <SVPWM_Update+0x15a>
      	if (svm->SectorPointer == 5){
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d36:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000d3a:	eef4 7a47 	vcmp.f32	s15, s14
 8000d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d42:	d104      	bne.n	8000d4e <SVPWM_Update+0x146>
         	svm->SectorPointer = 0;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	e009      	b.n	8000d62 <SVPWM_Update+0x15a>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d70:	d11f      	bne.n	8000db2 <SVPWM_Update+0x1aa>
		svm->U = svm->ta + svm->tb + svm->to;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	621a      	str	r2, [r3, #32]
 8000db0:	e0d7      	b.n	8000f62 <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dbc:	eef4 7a47 	vcmp.f32	s15, s14
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d11f      	bne.n	8000e06 <SVPWM_Update+0x1fe>
    	svm->U= svm->ta + svm->to;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	621a      	str	r2, [r3, #32]
 8000e04:	e0ad      	b.n	8000f62 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e10:	eef4 7a47 	vcmp.f32	s15, s14
 8000e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e18:	d11f      	bne.n	8000e5a <SVPWM_Update+0x252>
    	svm->U = svm->to;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	edc3 7a08 	vstr	s15, [r3, #32]
 8000e58:	e083      	b.n	8000f62 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e60:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e64:	eef4 7a47 	vcmp.f32	s15, s14
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	d11f      	bne.n	8000eae <SVPWM_Update+0x2a6>
    	svm->U = svm->to;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	edc3 7a08 	vstr	s15, [r3, #32]
 8000eac:	e059      	b.n	8000f62 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000eb4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000eb8:	eef4 7a47 	vcmp.f32	s15, s14
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec0:	d126      	bne.n	8000f10 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	edc3 7a08 	vstr	s15, [r3, #32]
 8000f00:	e02f      	b.n	8000f62 <SVPWM_Update+0x35a>
 8000f02:	bf00      	nop
 8000f04:	40a00000 	.word	0x40a00000
 8000f08:	40c90fdb 	.word	0x40c90fdb
 8000f0c:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f16:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f1a:	eef4 7a47 	vcmp.f32	s15, s14
 8000f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f22:	d11e      	bne.n	8000f62 <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <SVPWM_Update+0x3ec>)
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	3301      	adds	r3, #1
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <SVPWM_Update+0x3ec>)
 8000f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8a:	ee17 2a90 	vmov	r2, s15
 8000f8e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	edd3 6a07 	vldr	s13, [r3, #28]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <SVPWM_Update+0x3ec>)
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <SVPWM_Update+0x3ec>)
 8000fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb8:	ee17 2a90 	vmov	r2, s15
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	edd3 6a08 	vldr	s13, [r3, #32]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <SVPWM_Update+0x3ec>)
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SVPWM_Update+0x3ec>)
 8000fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe6:	ee17 2a90 	vmov	r2, s15
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <VHZ_Init>:
 */

#include "VHZ.h"
#include "math.h"

void VHZ_Init(VHZPROFILE *vhz, float FreqMin, float FreqRated, float VoltMin, float VoltRated) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6178      	str	r0, [r7, #20]
 8001000:	ed87 0a04 	vstr	s0, [r7, #16]
 8001004:	edc7 0a03 	vstr	s1, [r7, #12]
 8001008:	ed87 1a02 	vstr	s2, [r7, #8]
 800100c:	edc7 1a01 	vstr	s3, [r7, #4]
	vhz->FreqMin = FreqMin;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	601a      	str	r2, [r3, #0]
	vhz->FreqRated = FreqRated;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	605a      	str	r2, [r3, #4]
	vhz->VoltMin = VoltMin;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	609a      	str	r2, [r3, #8]
	vhz->VoltRated = VoltRated;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	60da      	str	r2, [r3, #12]
	vhz->VfSlope = (VoltRated - VoltMin) / (FreqRated - FreqMin);
 8001028:	ed97 7a01 	vldr	s14, [r7, #4]
 800102c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001030:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001034:	ed97 7a03 	vldr	s14, [r7, #12]
 8001038:	edd7 7a04 	vldr	s15, [r7, #16]
 800103c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	edc3 7a04 	vstr	s15, [r3, #16]
	vhz->Volt = 0;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
	vhz->Freq = FreqMin;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	619a      	str	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <VHZ_Update>:

void VHZ_Update(VHZPROFILE *vhz){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if (vhz->Freq <= vhz->FreqMin){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001080:	d804      	bhi.n	800108c <VHZ_Update+0x28>
		vhz->Volt = vhz->VoltMin;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	615a      	str	r2, [r3, #20]
    }

	else if ((vhz->Freq > vhz->FreqRated)){
       	vhz->Volt = vhz->VoltRated;
    }
}
 800108a:	e03b      	b.n	8001104 <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqMin) && (vhz->Freq <= vhz->FreqRated)){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a0:	dd20      	ble.n	80010e4 <VHZ_Update+0x80>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	d815      	bhi.n	80010e4 <VHZ_Update+0x80>
		vhz->Volt = vhz->VoltMin + vhz->VfSlope * (vhz->Freq - vhz->FreqMin);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	edd3 6a04 	vldr	s13, [r3, #16]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	ed93 6a06 	vldr	s12, [r3, #24]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80010e2:	e00f      	b.n	8001104 <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqRated)){
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	ed93 7a06 	vldr	s14, [r3, #24]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80010f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	dc00      	bgt.n	80010fc <VHZ_Update+0x98>
}
 80010fa:	e003      	b.n	8001104 <VHZ_Update+0xa0>
       	vhz->Volt = vhz->VoltRated;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	615a      	str	r2, [r3, #20]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b598      	push	{r3, r4, r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 8001114:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80011f8 <main+0xe8>
 8001118:	4838      	ldr	r0, [pc, #224]	; (80011fc <main+0xec>)
 800111a:	f7ff fd31 	bl	8000b80 <SVPWM_Init>
  VHZ_Init(&vhz1, 0.01, 10, 10, 100);
 800111e:	eddf 1a38 	vldr	s3, [pc, #224]	; 8001200 <main+0xf0>
 8001122:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8001126:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800112a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001204 <main+0xf4>
 800112e:	4836      	ldr	r0, [pc, #216]	; (8001208 <main+0xf8>)
 8001130:	f7ff ff62 	bl	8000ff8 <VHZ_Init>
  PIDController_Init(&slip, 5, 0, -500, 500, 0, 0, 10000);
 8001134:	ed9f 3a30 	vldr	s6, [pc, #192]	; 80011f8 <main+0xe8>
 8001138:	eddf 2a34 	vldr	s5, [pc, #208]	; 800120c <main+0xfc>
 800113c:	ed9f 2a33 	vldr	s4, [pc, #204]	; 800120c <main+0xfc>
 8001140:	eddf 1a33 	vldr	s3, [pc, #204]	; 8001210 <main+0x100>
 8001144:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8001214 <main+0x104>
 8001148:	eddf 0a30 	vldr	s1, [pc, #192]	; 800120c <main+0xfc>
 800114c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001150:	4831      	ldr	r0, [pc, #196]	; (8001218 <main+0x108>)
 8001152:	f7ff fcdf 	bl	8000b14 <PIDController_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f000 fbe8 	bl	800192a <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f865 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f000 f9e5 	bl	800152c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001162:	f000 f8cf 	bl	8001304 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001166:	f000 f9a7 	bl	80014b8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800116a:	2100      	movs	r1, #0
 800116c:	482b      	ldr	r0, [pc, #172]	; (800121c <main+0x10c>)
 800116e:	f001 fc85 	bl	8002a7c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001172:	2100      	movs	r1, #0
 8001174:	4829      	ldr	r0, [pc, #164]	; (800121c <main+0x10c>)
 8001176:	f002 fc67 	bl	8003a48 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800117a:	2104      	movs	r1, #4
 800117c:	4827      	ldr	r0, [pc, #156]	; (800121c <main+0x10c>)
 800117e:	f001 fc7d 	bl	8002a7c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001182:	2104      	movs	r1, #4
 8001184:	4825      	ldr	r0, [pc, #148]	; (800121c <main+0x10c>)
 8001186:	f002 fc5f 	bl	8003a48 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800118a:	2108      	movs	r1, #8
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <main+0x10c>)
 800118e:	f001 fc75 	bl	8002a7c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001192:	2108      	movs	r1, #8
 8001194:	4821      	ldr	r0, [pc, #132]	; (800121c <main+0x10c>)
 8001196:	f002 fc57 	bl	8003a48 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 800119a:	4821      	ldr	r0, [pc, #132]	; (8001220 <main+0x110>)
 800119c:	f001 fc0e 	bl	80029bc <HAL_TIM_Base_Start_IT>
		vhz1.Freq = 0.01;
	}
	else{
		vhz1.Freq += 0.001;
	}*/
	if(a >= 10){
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <main+0x114>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	db04      	blt.n	80011be <main+0xae>
		a = 0;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <main+0x114>)
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e012      	b.n	80011e4 <main+0xd4>
	}
	else{
		a += 0.001;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <main+0x114>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f984 	bl	80004d0 <__aeabi_f2d>
 80011c8:	a309      	add	r3, pc, #36	; (adr r3, 80011f0 <main+0xe0>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff f821 	bl	8000214 <__adddf3>
 80011d2:	4603      	mov	r3, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	4618      	mov	r0, r3
 80011d8:	4621      	mov	r1, r4
 80011da:	f7ff f9d1 	bl	8000580 <__aeabi_d2f>
 80011de:	4602      	mov	r2, r0
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <main+0x114>)
 80011e2:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 fbfd 	bl	80019e4 <HAL_Delay>
	if(a >= 10){
 80011ea:	e7d9      	b.n	80011a0 <main+0x90>
 80011ec:	f3af 8000 	nop.w
 80011f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011f4:	3f50624d 	.word	0x3f50624d
 80011f8:	461c4000 	.word	0x461c4000
 80011fc:	200000f4 	.word	0x200000f4
 8001200:	42c80000 	.word	0x42c80000
 8001204:	3c23d70a 	.word	0x3c23d70a
 8001208:	20000058 	.word	0x20000058
 800120c:	00000000 	.word	0x00000000
 8001210:	43fa0000 	.word	0x43fa0000
 8001214:	c3fa0000 	.word	0xc3fa0000
 8001218:	20000030 	.word	0x20000030
 800121c:	20000074 	.word	0x20000074
 8001220:	200000b4 	.word	0x200000b4
 8001224:	2000012c 	.word	0x2000012c

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fdaa 	bl	8003d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800124c:	f000 fec2 	bl	8001fd4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <SystemClock_Config+0xd4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <SystemClock_Config+0xd4>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <SystemClock_Config+0xd4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <SystemClock_Config+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a24      	ldr	r2, [pc, #144]	; (8001300 <SystemClock_Config+0xd8>)
 800126e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <SystemClock_Config+0xd8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001280:	2301      	movs	r3, #1
 8001282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001284:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001298:	23d8      	movs	r3, #216	; 0xd8
 800129a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012a0:	2309      	movs	r3, #9
 80012a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fef3 	bl	8002094 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012b4:	f000 fa0a 	bl	80016cc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012b8:	f000 fe9c 	bl	8001ff4 <HAL_PWREx_EnableOverDrive>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012c2:	f000 fa03 	bl	80016cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c6:	230f      	movs	r3, #15
 80012c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	2302      	movs	r3, #2
 80012cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2107      	movs	r1, #7
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 f979 	bl	80025dc <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80012f0:	f000 f9ec 	bl	80016cc <Error_Handler>
  }
}
 80012f4:	bf00      	nop
 80012f6:	3750      	adds	r7, #80	; 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09e      	sub	sp, #120	; 0x78
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001318:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	222c      	movs	r2, #44	; 0x2c
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fd1e 	bl	8003d90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001354:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001356:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <MX_TIM1_Init+0x1b0>)
 8001358:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 800135a:	4b55      	ldr	r3, [pc, #340]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 800135c:	22d7      	movs	r2, #215	; 0xd7
 800135e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001362:	2260      	movs	r2, #96	; 0x60
 8001364:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001366:	4b52      	ldr	r3, [pc, #328]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001368:	2263      	movs	r2, #99	; 0x63
 800136a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001372:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800137e:	484c      	ldr	r0, [pc, #304]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001380:	f001 faf0 	bl	8002964 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800138a:	f000 f99f 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001398:	4619      	mov	r1, r3
 800139a:	4845      	ldr	r0, [pc, #276]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 800139c:	f001 fdea 	bl	8002f74 <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013a6:	f000 f991 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013aa:	4841      	ldr	r0, [pc, #260]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 80013ac:	f001 fb30 	bl	8002a10 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80013b6:	f000 f989 	bl	80016cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80013be:	2300      	movs	r3, #0
 80013c0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c6:	4619      	mov	r1, r3
 80013c8:	4839      	ldr	r0, [pc, #228]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 80013ca:	f001 fe8d 	bl	80030e8 <HAL_TIM_SlaveConfigSynchro>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80013d4:	f000 f97a 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013e8:	4619      	mov	r1, r3
 80013ea:	4831      	ldr	r0, [pc, #196]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 80013ec:	f002 fb5c 	bl	8003aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013f6:	f000 f969 	bl	80016cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	; 0x60
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001402:	2300      	movs	r3, #0
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001406:	2300      	movs	r3, #0
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	2200      	movs	r2, #0
 800141c:	4619      	mov	r1, r3
 800141e:	4824      	ldr	r0, [pc, #144]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001420:	f001 fc90 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800142a:	f000 f94f 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800142e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001432:	2204      	movs	r2, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481e      	ldr	r0, [pc, #120]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001438:	f001 fc84 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001442:	f000 f943 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144a:	2208      	movs	r2, #8
 800144c:	4619      	mov	r1, r3
 800144e:	4818      	ldr	r0, [pc, #96]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001450:	f001 fc78 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800145a:	f000 f937 	bl	80016cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001484:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4807      	ldr	r0, [pc, #28]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 8001494:	f002 fb96 	bl	8003bc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 800149e:	f000 f915 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014a2:	4803      	ldr	r0, [pc, #12]	; (80014b0 <MX_TIM1_Init+0x1ac>)
 80014a4:	f000 f986 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 80014a8:	bf00      	nop
 80014aa:	3778      	adds	r7, #120	; 0x78
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000074 	.word	0x20000074
 80014b4:	40010000 	.word	0x40010000

080014b8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_TIM9_Init+0x6c>)
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <MX_TIM9_Init+0x70>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_TIM9_Init+0x6c>)
 80014d4:	22d7      	movs	r2, #215	; 0xd7
 80014d6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_TIM9_Init+0x6c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_TIM9_Init+0x6c>)
 80014e0:	2263      	movs	r2, #99	; 0x63
 80014e2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_TIM9_Init+0x6c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_TIM9_Init+0x6c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_TIM9_Init+0x6c>)
 80014f2:	f001 fa37 	bl	8002964 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80014fc:	f000 f8e6 	bl	80016cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_TIM9_Init+0x6c>)
 800150e:	f001 fdeb 	bl	80030e8 <HAL_TIM_SlaveConfigSynchro>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001518:	f000 f8d8 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200000b4 	.word	0x200000b4
 8001528:	40014000 	.word	0x40014000

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b46      	ldr	r3, [pc, #280]	; (800165c <MX_GPIO_Init+0x130>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a45      	ldr	r2, [pc, #276]	; (800165c <MX_GPIO_Init+0x130>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b43      	ldr	r3, [pc, #268]	; (800165c <MX_GPIO_Init+0x130>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	4b40      	ldr	r3, [pc, #256]	; (800165c <MX_GPIO_Init+0x130>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a3f      	ldr	r2, [pc, #252]	; (800165c <MX_GPIO_Init+0x130>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <MX_GPIO_Init+0x130>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <MX_GPIO_Init+0x130>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a39      	ldr	r2, [pc, #228]	; (800165c <MX_GPIO_Init+0x130>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <MX_GPIO_Init+0x130>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	4b34      	ldr	r3, [pc, #208]	; (800165c <MX_GPIO_Init+0x130>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a33      	ldr	r2, [pc, #204]	; (800165c <MX_GPIO_Init+0x130>)
 8001590:	f043 0310 	orr.w	r3, r3, #16
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <MX_GPIO_Init+0x130>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <MX_GPIO_Init+0x130>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <MX_GPIO_Init+0x130>)
 80015a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_GPIO_Init+0x130>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <MX_GPIO_Init+0x130>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a27      	ldr	r2, [pc, #156]	; (800165c <MX_GPIO_Init+0x130>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_GPIO_Init+0x130>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80015d8:	4821      	ldr	r0, [pc, #132]	; (8001660 <MX_GPIO_Init+0x134>)
 80015da:	f000 fce1 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2140      	movs	r1, #64	; 0x40
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <MX_GPIO_Init+0x138>)
 80015e4:	f000 fcdc 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <MX_GPIO_Init+0x13c>)
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	481b      	ldr	r0, [pc, #108]	; (800166c <MX_GPIO_Init+0x140>)
 80015fe:	f000 fb25 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001602:	f244 0381 	movw	r3, #16513	; 0x4081
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_GPIO_Init+0x134>)
 800161c:	f000 fb16 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <MX_GPIO_Init+0x138>)
 8001638:	f000 fb08 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_GPIO_Init+0x138>)
 8001650:	f000 fafc 	bl	8001c4c <HAL_GPIO_Init>

}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400
 8001664:	40021800 	.word	0x40021800
 8001668:	10110000 	.word	0x10110000
 800166c:	40020800 	.word	0x40020800

08001670 <HAL_TIM_PeriodElapsedCallback>:

}
#endif


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	OldSector = svpwm1.SectorPointer;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800167a:	edd3 7a05 	vldr	s15, [r3, #20]
 800167e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001682:	ee17 2a90 	vmov	r2, s15
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001688:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800168c:	f7ff fcea 	bl	8001064 <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 8001690:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001692:	490b      	ldr	r1, [pc, #44]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001696:	f7ff fab7 	bl	8000c08 <SVPWM_Update>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2101      	movs	r1, #1
 800169e:	480a      	ldr	r0, [pc, #40]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016a0:	f000 fc7e 	bl	8001fa0 <HAL_GPIO_WritePin>
	Count_Up(&svpwm1, OldSector);
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016ac:	f7ff f938 	bl	8000920 <Count_Up>

}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200000f4 	.word	0x200000f4
 80016bc:	20000028 	.word	0x20000028
 80016c0:	20000058 	.word	0x20000058
 80016c4:	20000074 	.word	0x20000074
 80016c8:	40020400 	.word	0x40020400

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_MspInit+0x50>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_MspInit+0x50>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_MspInit+0x50>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_MspInit+0x50>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_MspInit+0x50>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_MspInit+0x50>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2051      	movs	r0, #81	; 0x51
 8001718:	f000 fa61 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800171c:	2051      	movs	r0, #81	; 0x51
 800171e:	f000 fa7a 	bl	8001c16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <HAL_TIM_Base_MspInit+0x78>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d114      	bne.n	800176c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_TIM_Base_MspInit+0x7c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_TIM_Base_MspInit+0x7c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_TIM_Base_MspInit+0x7c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2018      	movs	r0, #24
 8001760:	f000 fa3d 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001764:	2018      	movs	r0, #24
 8001766:	f000 fa56 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800176a:	e018      	b.n	800179e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM9)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_TIM_Base_MspInit+0x80>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d113      	bne.n	800179e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_TIM_Base_MspInit+0x7c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <HAL_TIM_Base_MspInit+0x7c>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_TIM_Base_MspInit+0x7c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2018      	movs	r0, #24
 8001794:	f000 fa23 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001798:	2018      	movs	r0, #24
 800179a:	f000 fa3c 	bl	8001c16 <HAL_NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40014000 	.word	0x40014000

080017b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_TIM_MspPostInit+0x64>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d11c      	bne.n	8001810 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80017ee:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80017f2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001800:	2301      	movs	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_TIM_MspPostInit+0x6c>)
 800180c:	f000 fa1e 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40010000 	.word	0x40010000
 800181c:	40023800 	.word	0x40023800
 8001820:	40021000 	.word	0x40021000

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f894 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001886:	f001 f93d 	bl	8002b04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800188c:	f001 f93a 	bl	8002b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000074 	.word	0x20000074
 8001898:	200000b4 	.word	0x200000b4

0800189c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <SystemInit+0x28>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <SystemInit+0x28>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SystemInit+0x28>)
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	609a      	str	r2, [r3, #8]
#endif
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018de:	e003      	b.n	80018e8 <LoopCopyDataInit>

080018e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018e6:	3104      	adds	r1, #4

080018e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018f0:	d3f6      	bcc.n	80018e0 <CopyDataInit>
  ldr  r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018f4:	e002      	b.n	80018fc <LoopFillZerobss>

080018f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018f8:	f842 3b04 	str.w	r3, [r2], #4

080018fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001900:	d3f9      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd3 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f002 fa1f 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7ff fc01 	bl	8001110 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001914:	08004c40 	.word	0x08004c40
  ldr  r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800191c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001920:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001924:	20000134 	.word	0x20000134

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>

0800192a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192e:	2003      	movs	r0, #3
 8001930:	f000 f94a 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001934:	2000      	movs	r0, #0
 8001936:	f000 f805 	bl	8001944 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800193a:	f7ff fecf 	bl	80016dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f965 	bl	8001c32 <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 f92d 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000130 	.word	0x20000130

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000130 	.word	0x20000130

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_Delay+0x40>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000008 	.word	0x20000008

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <__NVIC_SetPriorityGrouping+0x40>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x40>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00
 8001a6c:	05fa0000 	.word	0x05fa0000

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff29 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff3e 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff8e 	bl	8001b1c <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5d 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff31 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e175      	b.n	8001f58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f040 8164 	bne.w	8001f52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d00b      	beq.n	8001caa <HAL_GPIO_Init+0x5e>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d007      	beq.n	8001caa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c9e:	2b11      	cmp	r3, #17
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b12      	cmp	r3, #18
 8001ca8:	d130      	bne.n	8001d0c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 0201 	and.w	r2, r3, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x100>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b12      	cmp	r3, #18
 8001d4a:	d123      	bne.n	8001d94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	69b9      	ldr	r1, [r7, #24]
 8001d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0203 	and.w	r2, r3, #3
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80be 	beq.w	8001f52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <HAL_GPIO_Init+0x320>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a64      	ldr	r2, [pc, #400]	; (8001f6c <HAL_GPIO_Init+0x320>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <HAL_GPIO_Init+0x320>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dee:	4a60      	ldr	r2, [pc, #384]	; (8001f70 <HAL_GPIO_Init+0x324>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <HAL_GPIO_Init+0x328>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d037      	beq.n	8001e8a <HAL_GPIO_Init+0x23e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <HAL_GPIO_Init+0x32c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d031      	beq.n	8001e86 <HAL_GPIO_Init+0x23a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a55      	ldr	r2, [pc, #340]	; (8001f7c <HAL_GPIO_Init+0x330>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02b      	beq.n	8001e82 <HAL_GPIO_Init+0x236>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a54      	ldr	r2, [pc, #336]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d025      	beq.n	8001e7e <HAL_GPIO_Init+0x232>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a53      	ldr	r2, [pc, #332]	; (8001f84 <HAL_GPIO_Init+0x338>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01f      	beq.n	8001e7a <HAL_GPIO_Init+0x22e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_GPIO_Init+0x33c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d019      	beq.n	8001e76 <HAL_GPIO_Init+0x22a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_GPIO_Init+0x340>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0x226>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <HAL_GPIO_Init+0x344>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00d      	beq.n	8001e6e <HAL_GPIO_Init+0x222>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4f      	ldr	r2, [pc, #316]	; (8001f94 <HAL_GPIO_Init+0x348>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <HAL_GPIO_Init+0x21e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4e      	ldr	r2, [pc, #312]	; (8001f98 <HAL_GPIO_Init+0x34c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_GPIO_Init+0x21a>
 8001e62:	2309      	movs	r3, #9
 8001e64:	e012      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e66:	230a      	movs	r3, #10
 8001e68:	e010      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	e00e      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e6e:	2307      	movs	r3, #7
 8001e70:	e00c      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00a      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e76:	2305      	movs	r3, #5
 8001e78:	e008      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e004      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4093      	lsls	r3, r2
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e9c:	4934      	ldr	r1, [pc, #208]	; (8001f70 <HAL_GPIO_Init+0x324>)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ece:	4a33      	ldr	r2, [pc, #204]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef8:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efe:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f22:	4a1e      	ldr	r2, [pc, #120]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3301      	adds	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b0f      	cmp	r3, #15
 8001f5c:	f67f ae86 	bls.w	8001c6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	3724      	adds	r7, #36	; 0x24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40021400 	.word	0x40021400
 8001f8c:	40021800 	.word	0x40021800
 8001f90:	40021c00 	.word	0x40021c00
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40022400 	.word	0x40022400
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_PWREx_EnableOverDrive+0x98>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_PWREx_EnableOverDrive+0x98>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_PWREx_EnableOverDrive+0x98>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_PWREx_EnableOverDrive+0x9c>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002022:	f7ff fcd3 	bl	80019cc <HAL_GetTick>
 8002026:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002028:	e009      	b.n	800203e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800202a:	f7ff fccf 	bl	80019cc <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002038:	d901      	bls.n	800203e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e022      	b.n	8002084 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204a:	d1ee      	bne.n	800202a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_PWREx_EnableOverDrive+0x9c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002056:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002058:	f7ff fcb8 	bl	80019cc <HAL_GetTick>
 800205c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800205e:	e009      	b.n	8002074 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002060:	f7ff fcb4 	bl	80019cc <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800206e:	d901      	bls.n	8002074 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e007      	b.n	8002084 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002080:	d1ee      	bne.n	8002060 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000

08002094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e291      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8087 	beq.w	80021c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b8:	4b96      	ldr	r3, [pc, #600]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d00c      	beq.n	80020de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c4:	4b93      	ldr	r3, [pc, #588]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d112      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62>
 80020d0:	4b90      	ldr	r3, [pc, #576]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020de:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d06c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x130>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d168      	bne.n	80021c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e26b      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x7a>
 8002100:	4b84      	ldr	r3, [pc, #528]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a83      	ldr	r2, [pc, #524]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e02e      	b.n	800216c <HAL_RCC_OscConfig+0xd8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x9c>
 8002116:	4b7f      	ldr	r3, [pc, #508]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7e      	ldr	r2, [pc, #504]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800211c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b7c      	ldr	r3, [pc, #496]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7b      	ldr	r2, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e01d      	b.n	800216c <HAL_RCC_OscConfig+0xd8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0xc0>
 800213a:	4b76      	ldr	r3, [pc, #472]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a75      	ldr	r2, [pc, #468]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b73      	ldr	r3, [pc, #460]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a72      	ldr	r2, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0xd8>
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b6c      	ldr	r3, [pc, #432]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6b      	ldr	r2, [pc, #428]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff fc2a 	bl	80019cc <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fc26 	bl	80019cc <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e21f      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b61      	ldr	r3, [pc, #388]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0xe8>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff fc16 	bl	80019cc <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fc12 	bl	80019cc <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e20b      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	4b57      	ldr	r3, [pc, #348]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x110>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d069      	beq.n	80022a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d2:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021de:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d11c      	bne.n	8002224 <HAL_RCC_OscConfig+0x190>
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d116      	bne.n	8002224 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x17a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e1df      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	493d      	ldr	r1, [pc, #244]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	e040      	b.n	80022a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d023      	beq.n	8002274 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a38      	ldr	r2, [pc, #224]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff fbc8 	bl	80019cc <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff fbc4 	bl	80019cc <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1bd      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4929      	ldr	r1, [pc, #164]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
 8002272:	e018      	b.n	80022a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff fba4 	bl	80019cc <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002288:	f7ff fba0 	bl	80019cc <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e199      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d038      	beq.n	8002324 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d019      	beq.n	80022ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80022bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7ff fb81 	bl	80019cc <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7ff fb7d 	bl	80019cc <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e176      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80022e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x23a>
 80022ec:	e01a      	b.n	8002324 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7ff fb67 	bl	80019cc <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002302:	f7ff fb63 	bl	80019cc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d903      	bls.n	8002318 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e15c      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
 8002314:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b91      	ldr	r3, [pc, #580]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ee      	bne.n	8002302 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a4 	beq.w	800247a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002332:	4b8b      	ldr	r3, [pc, #556]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a87      	ldr	r2, [pc, #540]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b85      	ldr	r3, [pc, #532]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	4b82      	ldr	r3, [pc, #520]	; (8002564 <HAL_RCC_OscConfig+0x4d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002366:	4b7f      	ldr	r3, [pc, #508]	; (8002564 <HAL_RCC_OscConfig+0x4d0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7e      	ldr	r2, [pc, #504]	; (8002564 <HAL_RCC_OscConfig+0x4d0>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7ff fb2b 	bl	80019cc <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7ff fb27 	bl	80019cc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e120      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238c:	4b75      	ldr	r3, [pc, #468]	; (8002564 <HAL_RCC_OscConfig+0x4d0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x31a>
 80023a0:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
 80023ac:	e02d      	b.n	800240a <HAL_RCC_OscConfig+0x376>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x33c>
 80023b6:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a69      	ldr	r2, [pc, #420]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	4b67      	ldr	r3, [pc, #412]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a66      	ldr	r2, [pc, #408]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
 80023ce:	e01c      	b.n	800240a <HAL_RCC_OscConfig+0x376>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x35e>
 80023d8:	4b61      	ldr	r3, [pc, #388]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a60      	ldr	r2, [pc, #384]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
 80023e4:	4b5e      	ldr	r3, [pc, #376]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a5d      	ldr	r2, [pc, #372]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	e00b      	b.n	800240a <HAL_RCC_OscConfig+0x376>
 80023f2:	4b5b      	ldr	r3, [pc, #364]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6713      	str	r3, [r2, #112]	; 0x70
 80023fe:	4b58      	ldr	r3, [pc, #352]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a57      	ldr	r2, [pc, #348]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d015      	beq.n	800243e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7ff fadb 	bl	80019cc <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7ff fad7 	bl	80019cc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0ce      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ee      	beq.n	800241a <HAL_RCC_OscConfig+0x386>
 800243c:	e014      	b.n	8002468 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7ff fac5 	bl	80019cc <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7ff fac1 	bl	80019cc <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	4b40      	ldr	r3, [pc, #256]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ee      	bne.n	8002446 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b3c      	ldr	r3, [pc, #240]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80a4 	beq.w	80025cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002484:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b08      	cmp	r3, #8
 800248e:	d06b      	beq.n	8002568 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d149      	bne.n	800252c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a30      	ldr	r2, [pc, #192]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800249e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fa92 	bl	80019cc <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff fa8e 	bl	80019cc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e087      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	4b28      	ldr	r3, [pc, #160]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69da      	ldr	r2, [r3, #28]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	3b01      	subs	r3, #1
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	4313      	orrs	r3, r2
 80024f0:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fa62 	bl	80019cc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7ff fa5e 	bl	80019cc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e057      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x478>
 800252a:	e04f      	b.n	80025cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff fa48 	bl	80019cc <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff fa44 	bl	80019cc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e03d      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x4ac>
 800255e:	e035      	b.n	80025cc <HAL_RCC_OscConfig+0x538>
 8002560:	40023800 	.word	0x40023800
 8002564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_RCC_OscConfig+0x544>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d028      	beq.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d121      	bne.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d11a      	bne.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800259e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d111      	bne.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d0      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d910      	bls.n	8002624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 020f 	bic.w	r2, r3, #15
 800260a:	4965      	ldr	r1, [pc, #404]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a58      	ldr	r2, [pc, #352]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002646:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800265e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d040      	beq.n	8002700 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e073      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06b      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4936      	ldr	r1, [pc, #216]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7ff f97c 	bl	80019cc <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7ff f978 	bl	80019cc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e053      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d210      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 020f 	bic.w	r2, r3, #15
 8002716:	4922      	ldr	r1, [pc, #136]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800276e:	f000 f821 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002772:	4601      	mov	r1, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	fa21 f303 	lsr.w	r3, r1, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1d0>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1d4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f8d8 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00
 80027a4:	40023800 	.word	0x40023800
 80027a8:	08004850 	.word	0x08004850
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000004 	.word	0x20000004

080027b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	2300      	movs	r3, #0
 80027c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ca:	4b63      	ldr	r3, [pc, #396]	; (8002958 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d007      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x32>
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d008      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x38>
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 80b4 	bne.w	8002948 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027e2:	60bb      	str	r3, [r7, #8]
      break;
 80027e4:	e0b3      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027e6:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80027e8:	60bb      	str	r3, [r7, #8]
      break;
 80027ea:	e0b0      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ec:	4b5a      	ldr	r3, [pc, #360]	; (8002958 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027f6:	4b58      	ldr	r3, [pc, #352]	; (8002958 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04a      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002802:	4b55      	ldr	r3, [pc, #340]	; (8002958 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	f04f 0400 	mov.w	r4, #0
 800280c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	ea03 0501 	and.w	r5, r3, r1
 8002818:	ea04 0602 	and.w	r6, r4, r2
 800281c:	4629      	mov	r1, r5
 800281e:	4632      	mov	r2, r6
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0154      	lsls	r4, r2, #5
 800282a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800282e:	014b      	lsls	r3, r1, #5
 8002830:	4619      	mov	r1, r3
 8002832:	4622      	mov	r2, r4
 8002834:	1b49      	subs	r1, r1, r5
 8002836:	eb62 0206 	sbc.w	r2, r2, r6
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	0194      	lsls	r4, r2, #6
 8002844:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002848:	018b      	lsls	r3, r1, #6
 800284a:	1a5b      	subs	r3, r3, r1
 800284c:	eb64 0402 	sbc.w	r4, r4, r2
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	00e2      	lsls	r2, r4, #3
 800285a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800285e:	00d9      	lsls	r1, r3, #3
 8002860:	460b      	mov	r3, r1
 8002862:	4614      	mov	r4, r2
 8002864:	195b      	adds	r3, r3, r5
 8002866:	eb44 0406 	adc.w	r4, r4, r6
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	0262      	lsls	r2, r4, #9
 8002874:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002878:	0259      	lsls	r1, r3, #9
 800287a:	460b      	mov	r3, r1
 800287c:	4614      	mov	r4, r2
 800287e:	4618      	mov	r0, r3
 8002880:	4621      	mov	r1, r4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	461a      	mov	r2, r3
 800288a:	4623      	mov	r3, r4
 800288c:	f7fd fec8 	bl	8000620 <__aeabi_uldivmod>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e049      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002898:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	f04f 0400 	mov.w	r4, #0
 80028a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	ea03 0501 	and.w	r5, r3, r1
 80028ae:	ea04 0602 	and.w	r6, r4, r2
 80028b2:	4629      	mov	r1, r5
 80028b4:	4632      	mov	r2, r6
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	f04f 0400 	mov.w	r4, #0
 80028be:	0154      	lsls	r4, r2, #5
 80028c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028c4:	014b      	lsls	r3, r1, #5
 80028c6:	4619      	mov	r1, r3
 80028c8:	4622      	mov	r2, r4
 80028ca:	1b49      	subs	r1, r1, r5
 80028cc:	eb62 0206 	sbc.w	r2, r2, r6
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	f04f 0400 	mov.w	r4, #0
 80028d8:	0194      	lsls	r4, r2, #6
 80028da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028de:	018b      	lsls	r3, r1, #6
 80028e0:	1a5b      	subs	r3, r3, r1
 80028e2:	eb64 0402 	sbc.w	r4, r4, r2
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028f4:	00d9      	lsls	r1, r3, #3
 80028f6:	460b      	mov	r3, r1
 80028f8:	4614      	mov	r4, r2
 80028fa:	195b      	adds	r3, r3, r5
 80028fc:	eb44 0406 	adc.w	r4, r4, r6
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	02a2      	lsls	r2, r4, #10
 800290a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800290e:	0299      	lsls	r1, r3, #10
 8002910:	460b      	mov	r3, r1
 8002912:	4614      	mov	r4, r2
 8002914:	4618      	mov	r0, r3
 8002916:	4621      	mov	r1, r4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f04f 0400 	mov.w	r4, #0
 800291e:	461a      	mov	r2, r3
 8002920:	4623      	mov	r3, r4
 8002922:	f7fd fe7d 	bl	8000620 <__aeabi_uldivmod>
 8002926:	4603      	mov	r3, r0
 8002928:	460c      	mov	r4, r1
 800292a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	60bb      	str	r3, [r7, #8]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800294a:	60bb      	str	r3, [r7, #8]
      break;
 800294c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294e:	68bb      	ldr	r3, [r7, #8]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200

08002964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e01d      	b.n	80029b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fed0 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 fc0a 	bl	80031bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_TIM_Base_Start_IT+0x50>)
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d00b      	beq.n	80029fe <HAL_TIM_Base_Start_IT+0x42>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d007      	beq.n	80029fe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	00010007 	.word	0x00010007

08002a10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e01d      	b.n	8002a5e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f815 	bl	8002a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f000 fbb4 	bl	80031bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 ffb4 	bl	80039fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <HAL_TIM_PWM_Start+0x7c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x2c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <HAL_TIM_PWM_Start+0x80>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_TIM_PWM_Start+0x30>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_PWM_Start+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_TIM_PWM_Start+0x84>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d00b      	beq.n	8002aec <HAL_TIM_PWM_Start+0x70>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d007      	beq.n	8002aec <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40010400 	.word	0x40010400
 8002b00:	00010007 	.word	0x00010007

08002b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0202 	mvn.w	r2, #2
 8002b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fb1a 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fb0c 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb1d 	bl	8003194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0204 	mvn.w	r2, #4
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 faf0 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fae2 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 faf3 	bl	8003194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0208 	mvn.w	r2, #8
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fac6 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fab8 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fac9 	bl	8003194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0210 	mvn.w	r2, #16
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2208      	movs	r2, #8
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa9c 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa8e 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fa9f 	bl	8003194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0201 	mvn.w	r2, #1
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe fcf4 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b80      	cmp	r3, #128	; 0x80
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f001 f810 	bl	8003cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	d10e      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	d107      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f001 f803 	bl	8003ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d10e      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d107      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fa4d 	bl	80031a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d10e      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d107      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0220 	mvn.w	r2, #32
 8002d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 ffc3 	bl	8003cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e105      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x226>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b14      	cmp	r3, #20
 8002d72:	f200 80f0 	bhi.w	8002f56 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002dd1 	.word	0x08002dd1
 8002d80:	08002f57 	.word	0x08002f57
 8002d84:	08002f57 	.word	0x08002f57
 8002d88:	08002f57 	.word	0x08002f57
 8002d8c:	08002e11 	.word	0x08002e11
 8002d90:	08002f57 	.word	0x08002f57
 8002d94:	08002f57 	.word	0x08002f57
 8002d98:	08002f57 	.word	0x08002f57
 8002d9c:	08002e53 	.word	0x08002e53
 8002da0:	08002f57 	.word	0x08002f57
 8002da4:	08002f57 	.word	0x08002f57
 8002da8:	08002f57 	.word	0x08002f57
 8002dac:	08002e93 	.word	0x08002e93
 8002db0:	08002f57 	.word	0x08002f57
 8002db4:	08002f57 	.word	0x08002f57
 8002db8:	08002f57 	.word	0x08002f57
 8002dbc:	08002ed5 	.word	0x08002ed5
 8002dc0:	08002f57 	.word	0x08002f57
 8002dc4:	08002f57 	.word	0x08002f57
 8002dc8:	08002f57 	.word	0x08002f57
 8002dcc:	08002f15 	.word	0x08002f15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fa90 	bl	80032fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0208 	orr.w	r2, r2, #8
 8002dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6999      	ldr	r1, [r3, #24]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	619a      	str	r2, [r3, #24]
      break;
 8002e0e:	e0a3      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fae2 	bl	80033e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6999      	ldr	r1, [r3, #24]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	619a      	str	r2, [r3, #24]
      break;
 8002e50:	e082      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fb39 	bl	80034d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0208 	orr.w	r2, r2, #8
 8002e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0204 	bic.w	r2, r2, #4
 8002e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69d9      	ldr	r1, [r3, #28]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	61da      	str	r2, [r3, #28]
      break;
 8002e90:	e062      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fb8f 	bl	80035bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69d9      	ldr	r1, [r3, #28]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	021a      	lsls	r2, r3, #8
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	61da      	str	r2, [r3, #28]
      break;
 8002ed2:	e041      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fbc6 	bl	800366c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f12:	e021      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fbf8 	bl	8003710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f54:	e000      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002f56:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop

08002f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_ConfigClockSource+0x18>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0a6      	b.n	80030da <HAL_TIM_ConfigClockSource+0x166>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <HAL_TIM_ConfigClockSource+0x170>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d067      	beq.n	8003094 <HAL_TIM_ConfigClockSource+0x120>
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d80b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x6c>
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d073      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x140>
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d802      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x62>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d06f      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002fd4:	e078      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d06c      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x140>
 8002fda:	2b30      	cmp	r3, #48	; 0x30
 8002fdc:	d06a      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002fde:	e073      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002fe0:	2b70      	cmp	r3, #112	; 0x70
 8002fe2:	d00d      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0x8c>
 8002fe4:	2b70      	cmp	r3, #112	; 0x70
 8002fe6:	d804      	bhi.n	8002ff2 <HAL_TIM_ConfigClockSource+0x7e>
 8002fe8:	2b50      	cmp	r3, #80	; 0x50
 8002fea:	d033      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0xe0>
 8002fec:	2b60      	cmp	r3, #96	; 0x60
 8002fee:	d041      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ff0:	e06a      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	d066      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x152>
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d017      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ffe:	e063      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f000 fcd4 	bl	80039bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003022:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
      break;
 800302c:	e04c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f000 fcbd 	bl	80039bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003050:	609a      	str	r2, [r3, #8]
      break;
 8003052:	e039      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	461a      	mov	r2, r3
 8003062:	f000 fc31 	bl	80038c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2150      	movs	r1, #80	; 0x50
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fc8a 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003072:	e029      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	461a      	mov	r2, r3
 8003082:	f000 fc50 	bl	8003926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2160      	movs	r1, #96	; 0x60
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fc7a 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003092:	e019      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f000 fc11 	bl	80038c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2140      	movs	r1, #64	; 0x40
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fc6a 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 80030b2:	e009      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fc61 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e000      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80030c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	fffeff88 	.word	0xfffeff88

080030e8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_TIM_SlaveConfigSynchro+0x18>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e031      	b.n	8003164 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003110:	6839      	ldr	r1, [r7, #0]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fb50 	bl	80037b8 <TIM_SlaveTimer_SetConfig>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e018      	b.n	8003164 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003140:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003150:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <TIM_Base_SetConfig+0x114>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <TIM_Base_SetConfig+0x40>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031da:	d00f      	beq.n	80031fc <TIM_Base_SetConfig+0x40>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3d      	ldr	r2, [pc, #244]	; (80032d4 <TIM_Base_SetConfig+0x118>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00b      	beq.n	80031fc <TIM_Base_SetConfig+0x40>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3c      	ldr	r2, [pc, #240]	; (80032d8 <TIM_Base_SetConfig+0x11c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <TIM_Base_SetConfig+0x40>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3b      	ldr	r2, [pc, #236]	; (80032dc <TIM_Base_SetConfig+0x120>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0x40>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <TIM_Base_SetConfig+0x124>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <TIM_Base_SetConfig+0x114>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02b      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d027      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <TIM_Base_SetConfig+0x118>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d023      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <TIM_Base_SetConfig+0x11c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01f      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <TIM_Base_SetConfig+0x120>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01b      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a29      	ldr	r2, [pc, #164]	; (80032e0 <TIM_Base_SetConfig+0x124>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d017      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <TIM_Base_SetConfig+0x128>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a27      	ldr	r2, [pc, #156]	; (80032e8 <TIM_Base_SetConfig+0x12c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00f      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a26      	ldr	r2, [pc, #152]	; (80032ec <TIM_Base_SetConfig+0x130>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00b      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <TIM_Base_SetConfig+0x134>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d007      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <TIM_Base_SetConfig+0x138>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <TIM_Base_SetConfig+0x13c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d108      	bne.n	8003280 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <TIM_Base_SetConfig+0x114>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_Base_SetConfig+0xf8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <TIM_Base_SetConfig+0x124>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d103      	bne.n	80032bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	615a      	str	r2, [r3, #20]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40010000 	.word	0x40010000
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40000800 	.word	0x40000800
 80032dc:	40000c00 	.word	0x40000c00
 80032e0:	40010400 	.word	0x40010400
 80032e4:	40014000 	.word	0x40014000
 80032e8:	40014400 	.word	0x40014400
 80032ec:	40014800 	.word	0x40014800
 80032f0:	40001800 	.word	0x40001800
 80032f4:	40001c00 	.word	0x40001c00
 80032f8:	40002000 	.word	0x40002000

080032fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f023 0201 	bic.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <TIM_OC1_SetConfig+0xd8>)
 8003328:	4013      	ands	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f023 0302 	bic.w	r3, r3, #2
 8003344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <TIM_OC1_SetConfig+0xdc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_OC1_SetConfig+0x64>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a20      	ldr	r2, [pc, #128]	; (80033dc <TIM_OC1_SetConfig+0xe0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10c      	bne.n	800337a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f023 0308 	bic.w	r3, r3, #8
 8003366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <TIM_OC1_SetConfig+0xdc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_OC1_SetConfig+0x8e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a15      	ldr	r2, [pc, #84]	; (80033dc <TIM_OC1_SetConfig+0xe0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	fffeff8f 	.word	0xfffeff8f
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40010400 	.word	0x40010400

080033e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0210 	bic.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <TIM_OC2_SetConfig+0xe4>)
 800340c:	4013      	ands	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0320 	bic.w	r3, r3, #32
 800342a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <TIM_OC2_SetConfig+0xe8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_OC2_SetConfig+0x68>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a22      	ldr	r2, [pc, #136]	; (80034cc <TIM_OC2_SetConfig+0xec>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d10d      	bne.n	8003464 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <TIM_OC2_SetConfig+0xe8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_OC2_SetConfig+0x94>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <TIM_OC2_SetConfig+0xec>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d113      	bne.n	800349c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800347a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	feff8fff 	.word	0xfeff8fff
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40010400 	.word	0x40010400

080034d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <TIM_OC3_SetConfig+0xe0>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <TIM_OC3_SetConfig+0xe4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_OC3_SetConfig+0x66>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <TIM_OC3_SetConfig+0xe8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10d      	bne.n	8003552 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <TIM_OC3_SetConfig+0xe4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_OC3_SetConfig+0x92>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a16      	ldr	r2, [pc, #88]	; (80035b8 <TIM_OC3_SetConfig+0xe8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d113      	bne.n	800358a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]
}
 80035a4:	bf00      	nop
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	fffeff8f 	.word	0xfffeff8f
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40010400 	.word	0x40010400

080035bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <TIM_OC4_SetConfig+0xa4>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	031b      	lsls	r3, r3, #12
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <TIM_OC4_SetConfig+0xa8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_OC4_SetConfig+0x68>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <TIM_OC4_SetConfig+0xac>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d109      	bne.n	8003638 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	feff8fff 	.word	0xfeff8fff
 8003664:	40010000 	.word	0x40010000
 8003668:	40010400 	.word	0x40010400

0800366c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <TIM_OC5_SetConfig+0x98>)
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <TIM_OC5_SetConfig+0x9c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_OC5_SetConfig+0x5e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a11      	ldr	r2, [pc, #68]	; (800370c <TIM_OC5_SetConfig+0xa0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d109      	bne.n	80036de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	bf00      	nop
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	fffeff8f 	.word	0xfffeff8f
 8003708:	40010000 	.word	0x40010000
 800370c:	40010400 	.word	0x40010400

08003710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <TIM_OC6_SetConfig+0x9c>)
 800373c:	4013      	ands	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	051b      	lsls	r3, r3, #20
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <TIM_OC6_SetConfig+0xa0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_OC6_SetConfig+0x60>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <TIM_OC6_SetConfig+0xa4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d109      	bne.n	8003784 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003776:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	029b      	lsls	r3, r3, #10
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	feff8fff 	.word	0xfeff8fff
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40010400 	.word	0x40010400

080037b8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <TIM_SlaveTimer_SetConfig+0x10c>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d05c      	beq.n	80038b8 <TIM_SlaveTimer_SetConfig+0x100>
 80037fe:	2b30      	cmp	r3, #48	; 0x30
 8003800:	d806      	bhi.n	8003810 <TIM_SlaveTimer_SetConfig+0x58>
 8003802:	2b10      	cmp	r3, #16
 8003804:	d058      	beq.n	80038b8 <TIM_SlaveTimer_SetConfig+0x100>
 8003806:	2b20      	cmp	r3, #32
 8003808:	d056      	beq.n	80038b8 <TIM_SlaveTimer_SetConfig+0x100>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d054      	beq.n	80038b8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800380e:	e054      	b.n	80038ba <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003810:	2b50      	cmp	r3, #80	; 0x50
 8003812:	d03d      	beq.n	8003890 <TIM_SlaveTimer_SetConfig+0xd8>
 8003814:	2b50      	cmp	r3, #80	; 0x50
 8003816:	d802      	bhi.n	800381e <TIM_SlaveTimer_SetConfig+0x66>
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d010      	beq.n	800383e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800381c:	e04d      	b.n	80038ba <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800381e:	2b60      	cmp	r3, #96	; 0x60
 8003820:	d040      	beq.n	80038a4 <TIM_SlaveTimer_SetConfig+0xec>
 8003822:	2b70      	cmp	r3, #112	; 0x70
 8003824:	d000      	beq.n	8003828 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003826:	e048      	b.n	80038ba <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68d9      	ldr	r1, [r3, #12]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f000 f8c0 	bl	80039bc <TIM_ETR_SetConfig>
      break;
 800383c:	e03d      	b.n	80038ba <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d101      	bne.n	800384a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e038      	b.n	80038bc <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1a      	ldr	r2, [r3, #32]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003870:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	621a      	str	r2, [r3, #32]
      break;
 800388e:	e014      	b.n	80038ba <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	6899      	ldr	r1, [r3, #8]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	461a      	mov	r2, r3
 800389e:	f000 f813 	bl	80038c8 <TIM_TI1_ConfigInputStage>
      break;
 80038a2:	e00a      	b.n	80038ba <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6899      	ldr	r1, [r3, #8]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f000 f838 	bl	8003926 <TIM_TI2_ConfigInputStage>
      break;
 80038b6:	e000      	b.n	80038ba <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80038b8:	bf00      	nop
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	fffefff8 	.word	0xfffefff8

080038c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 030a 	bic.w	r3, r3, #10
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0210 	bic.w	r2, r3, #16
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	031b      	lsls	r3, r3, #12
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f043 0307 	orr.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	021a      	lsls	r2, r3, #8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	431a      	orrs	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	609a      	str	r2, [r3, #8]
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2201      	movs	r2, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1a      	ldr	r2, [r3, #32]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2204      	movs	r2, #4
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f94e 	bl	8003cfc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_TIMEx_PWMN_Start+0x5c>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d00b      	beq.n	8003a9a <HAL_TIMEx_PWMN_Start+0x52>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a88:	d007      	beq.n	8003a9a <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	00010007 	.word	0x00010007

08003aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e06d      	b.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a30      	ldr	r2, [pc, #192]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a2f      	ldr	r2, [pc, #188]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d108      	bne.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003afa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d022      	beq.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d01d      	beq.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d018      	beq.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a16      	ldr	r2, [pc, #88]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10c      	bne.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40010400 	.word	0x40010400
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40001800 	.word	0x40001800

08003bc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e065      	b.n	8003cac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	041b      	lsls	r3, r3, #16
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d115      	bne.n	8003c9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	051b      	lsls	r3, r3, #20
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2204      	movs	r2, #4
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	401a      	ands	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	4e0d      	ldr	r6, [pc, #52]	; (8003d80 <__libc_init_array+0x38>)
 8003d4c:	4c0d      	ldr	r4, [pc, #52]	; (8003d84 <__libc_init_array+0x3c>)
 8003d4e:	1ba4      	subs	r4, r4, r6
 8003d50:	10a4      	asrs	r4, r4, #2
 8003d52:	2500      	movs	r5, #0
 8003d54:	42a5      	cmp	r5, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	4e0b      	ldr	r6, [pc, #44]	; (8003d88 <__libc_init_array+0x40>)
 8003d5a:	4c0c      	ldr	r4, [pc, #48]	; (8003d8c <__libc_init_array+0x44>)
 8003d5c:	f000 fd6c 	bl	8004838 <_init>
 8003d60:	1ba4      	subs	r4, r4, r6
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	2500      	movs	r5, #0
 8003d66:	42a5      	cmp	r5, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d70:	4798      	blx	r3
 8003d72:	3501      	adds	r5, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d7a:	4798      	blx	r3
 8003d7c:	3501      	adds	r5, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08004c38 	.word	0x08004c38
 8003d84:	08004c38 	.word	0x08004c38
 8003d88:	08004c38 	.word	0x08004c38
 8003d8c:	08004c3c 	.word	0x08004c3c

08003d90 <memset>:
 8003d90:	4402      	add	r2, r0
 8003d92:	4603      	mov	r3, r0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <sinf>:
 8003da0:	ee10 3a10 	vmov	r3, s0
 8003da4:	b507      	push	{r0, r1, r2, lr}
 8003da6:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <sinf+0x7c>)
 8003da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dac:	4293      	cmp	r3, r2
 8003dae:	dc05      	bgt.n	8003dbc <sinf+0x1c>
 8003db0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003e20 <sinf+0x80>
 8003db4:	2000      	movs	r0, #0
 8003db6:	f000 fc41 	bl	800463c <__kernel_sinf>
 8003dba:	e004      	b.n	8003dc6 <sinf+0x26>
 8003dbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003dc0:	db04      	blt.n	8003dcc <sinf+0x2c>
 8003dc2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003dc6:	b003      	add	sp, #12
 8003dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dcc:	4668      	mov	r0, sp
 8003dce:	f000 f829 	bl	8003e24 <__ieee754_rem_pio2f>
 8003dd2:	f000 0003 	and.w	r0, r0, #3
 8003dd6:	2801      	cmp	r0, #1
 8003dd8:	d008      	beq.n	8003dec <sinf+0x4c>
 8003dda:	2802      	cmp	r0, #2
 8003ddc:	d00d      	beq.n	8003dfa <sinf+0x5a>
 8003dde:	b9b0      	cbnz	r0, 8003e0e <sinf+0x6e>
 8003de0:	2001      	movs	r0, #1
 8003de2:	eddd 0a01 	vldr	s1, [sp, #4]
 8003de6:	ed9d 0a00 	vldr	s0, [sp]
 8003dea:	e7e4      	b.n	8003db6 <sinf+0x16>
 8003dec:	eddd 0a01 	vldr	s1, [sp, #4]
 8003df0:	ed9d 0a00 	vldr	s0, [sp]
 8003df4:	f000 f942 	bl	800407c <__kernel_cosf>
 8003df8:	e7e5      	b.n	8003dc6 <sinf+0x26>
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	eddd 0a01 	vldr	s1, [sp, #4]
 8003e00:	ed9d 0a00 	vldr	s0, [sp]
 8003e04:	f000 fc1a 	bl	800463c <__kernel_sinf>
 8003e08:	eeb1 0a40 	vneg.f32	s0, s0
 8003e0c:	e7db      	b.n	8003dc6 <sinf+0x26>
 8003e0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8003e12:	ed9d 0a00 	vldr	s0, [sp]
 8003e16:	f000 f931 	bl	800407c <__kernel_cosf>
 8003e1a:	e7f5      	b.n	8003e08 <sinf+0x68>
 8003e1c:	3f490fd8 	.word	0x3f490fd8
 8003e20:	00000000 	.word	0x00000000

08003e24 <__ieee754_rem_pio2f>:
 8003e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e26:	ee10 6a10 	vmov	r6, s0
 8003e2a:	4b86      	ldr	r3, [pc, #536]	; (8004044 <__ieee754_rem_pio2f+0x220>)
 8003e2c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8003e30:	429c      	cmp	r4, r3
 8003e32:	b087      	sub	sp, #28
 8003e34:	4605      	mov	r5, r0
 8003e36:	dc05      	bgt.n	8003e44 <__ieee754_rem_pio2f+0x20>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	ed85 0a00 	vstr	s0, [r5]
 8003e3e:	6043      	str	r3, [r0, #4]
 8003e40:	2000      	movs	r0, #0
 8003e42:	e020      	b.n	8003e86 <__ieee754_rem_pio2f+0x62>
 8003e44:	4b80      	ldr	r3, [pc, #512]	; (8004048 <__ieee754_rem_pio2f+0x224>)
 8003e46:	429c      	cmp	r4, r3
 8003e48:	dc38      	bgt.n	8003ebc <__ieee754_rem_pio2f+0x98>
 8003e4a:	2e00      	cmp	r6, #0
 8003e4c:	f024 040f 	bic.w	r4, r4, #15
 8003e50:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800404c <__ieee754_rem_pio2f+0x228>
 8003e54:	4b7e      	ldr	r3, [pc, #504]	; (8004050 <__ieee754_rem_pio2f+0x22c>)
 8003e56:	dd18      	ble.n	8003e8a <__ieee754_rem_pio2f+0x66>
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003e5e:	bf09      	itett	eq
 8003e60:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8004054 <__ieee754_rem_pio2f+0x230>
 8003e64:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8004058 <__ieee754_rem_pio2f+0x234>
 8003e68:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003e6c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800405c <__ieee754_rem_pio2f+0x238>
 8003e70:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003e74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e78:	edc0 6a00 	vstr	s13, [r0]
 8003e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e80:	edc0 7a01 	vstr	s15, [r0, #4]
 8003e84:	2001      	movs	r0, #1
 8003e86:	b007      	add	sp, #28
 8003e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003e90:	bf09      	itett	eq
 8003e92:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8004054 <__ieee754_rem_pio2f+0x230>
 8003e96:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8004058 <__ieee754_rem_pio2f+0x234>
 8003e9a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003e9e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800405c <__ieee754_rem_pio2f+0x238>
 8003ea2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003ea6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003eaa:	edc0 6a00 	vstr	s13, [r0]
 8003eae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eb2:	edc0 7a01 	vstr	s15, [r0, #4]
 8003eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eba:	e7e4      	b.n	8003e86 <__ieee754_rem_pio2f+0x62>
 8003ebc:	4b68      	ldr	r3, [pc, #416]	; (8004060 <__ieee754_rem_pio2f+0x23c>)
 8003ebe:	429c      	cmp	r4, r3
 8003ec0:	dc71      	bgt.n	8003fa6 <__ieee754_rem_pio2f+0x182>
 8003ec2:	f000 fc03 	bl	80046cc <fabsf>
 8003ec6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004064 <__ieee754_rem_pio2f+0x240>
 8003eca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003ece:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003eda:	ee17 0a90 	vmov	r0, s15
 8003ede:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800404c <__ieee754_rem_pio2f+0x228>
 8003ee2:	eeb1 7a46 	vneg.f32	s14, s12
 8003ee6:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003eea:	281f      	cmp	r0, #31
 8003eec:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004058 <__ieee754_rem_pio2f+0x234>
 8003ef0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ef4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003ef8:	ee16 3a90 	vmov	r3, s13
 8003efc:	dc1c      	bgt.n	8003f38 <__ieee754_rem_pio2f+0x114>
 8003efe:	1e47      	subs	r7, r0, #1
 8003f00:	4959      	ldr	r1, [pc, #356]	; (8004068 <__ieee754_rem_pio2f+0x244>)
 8003f02:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8003f06:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8003f0a:	428a      	cmp	r2, r1
 8003f0c:	d014      	beq.n	8003f38 <__ieee754_rem_pio2f+0x114>
 8003f0e:	602b      	str	r3, [r5, #0]
 8003f10:	ed95 7a00 	vldr	s14, [r5]
 8003f14:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003f18:	2e00      	cmp	r6, #0
 8003f1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003f1e:	ed85 0a01 	vstr	s0, [r5, #4]
 8003f22:	dab0      	bge.n	8003e86 <__ieee754_rem_pio2f+0x62>
 8003f24:	eeb1 7a47 	vneg.f32	s14, s14
 8003f28:	eeb1 0a40 	vneg.f32	s0, s0
 8003f2c:	ed85 7a00 	vstr	s14, [r5]
 8003f30:	ed85 0a01 	vstr	s0, [r5, #4]
 8003f34:	4240      	negs	r0, r0
 8003f36:	e7a6      	b.n	8003e86 <__ieee754_rem_pio2f+0x62>
 8003f38:	15e4      	asrs	r4, r4, #23
 8003f3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003f3e:	1aa2      	subs	r2, r4, r2
 8003f40:	2a08      	cmp	r2, #8
 8003f42:	dde4      	ble.n	8003f0e <__ieee754_rem_pio2f+0xea>
 8003f44:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004054 <__ieee754_rem_pio2f+0x230>
 8003f48:	eef0 6a40 	vmov.f32	s13, s0
 8003f4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003f50:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003f54:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003f58:	eddf 7a40 	vldr	s15, [pc, #256]	; 800405c <__ieee754_rem_pio2f+0x238>
 8003f5c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8003f60:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8003f64:	eef0 7a40 	vmov.f32	s15, s0
 8003f68:	ee15 3a90 	vmov	r3, s11
 8003f6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003f70:	1aa4      	subs	r4, r4, r2
 8003f72:	2c19      	cmp	r4, #25
 8003f74:	dc04      	bgt.n	8003f80 <__ieee754_rem_pio2f+0x15c>
 8003f76:	edc5 5a00 	vstr	s11, [r5]
 8003f7a:	eeb0 0a66 	vmov.f32	s0, s13
 8003f7e:	e7c7      	b.n	8003f10 <__ieee754_rem_pio2f+0xec>
 8003f80:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800406c <__ieee754_rem_pio2f+0x248>
 8003f84:	eeb0 0a66 	vmov.f32	s0, s13
 8003f88:	eea7 0a25 	vfma.f32	s0, s14, s11
 8003f8c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003f90:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003f94:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004070 <__ieee754_rem_pio2f+0x24c>
 8003f98:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8003f9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003fa0:	ed85 7a00 	vstr	s14, [r5]
 8003fa4:	e7b4      	b.n	8003f10 <__ieee754_rem_pio2f+0xec>
 8003fa6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003faa:	db06      	blt.n	8003fba <__ieee754_rem_pio2f+0x196>
 8003fac:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003fb0:	edc0 7a01 	vstr	s15, [r0, #4]
 8003fb4:	edc0 7a00 	vstr	s15, [r0]
 8003fb8:	e742      	b.n	8003e40 <__ieee754_rem_pio2f+0x1c>
 8003fba:	15e2      	asrs	r2, r4, #23
 8003fbc:	3a86      	subs	r2, #134	; 0x86
 8003fbe:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003fca:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004074 <__ieee754_rem_pio2f+0x250>
 8003fce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fd6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003fda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003fe2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fea:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003fee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ff2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffa:	edcd 7a05 	vstr	s15, [sp, #20]
 8003ffe:	d11e      	bne.n	800403e <__ieee754_rem_pio2f+0x21a>
 8004000:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2302      	movne	r3, #2
 800400e:	491a      	ldr	r1, [pc, #104]	; (8004078 <__ieee754_rem_pio2f+0x254>)
 8004010:	9101      	str	r1, [sp, #4]
 8004012:	2102      	movs	r1, #2
 8004014:	9100      	str	r1, [sp, #0]
 8004016:	a803      	add	r0, sp, #12
 8004018:	4629      	mov	r1, r5
 800401a:	f000 f88d 	bl	8004138 <__kernel_rem_pio2f>
 800401e:	2e00      	cmp	r6, #0
 8004020:	f6bf af31 	bge.w	8003e86 <__ieee754_rem_pio2f+0x62>
 8004024:	edd5 7a00 	vldr	s15, [r5]
 8004028:	eef1 7a67 	vneg.f32	s15, s15
 800402c:	edc5 7a00 	vstr	s15, [r5]
 8004030:	edd5 7a01 	vldr	s15, [r5, #4]
 8004034:	eef1 7a67 	vneg.f32	s15, s15
 8004038:	edc5 7a01 	vstr	s15, [r5, #4]
 800403c:	e77a      	b.n	8003f34 <__ieee754_rem_pio2f+0x110>
 800403e:	2303      	movs	r3, #3
 8004040:	e7e5      	b.n	800400e <__ieee754_rem_pio2f+0x1ea>
 8004042:	bf00      	nop
 8004044:	3f490fd8 	.word	0x3f490fd8
 8004048:	4016cbe3 	.word	0x4016cbe3
 800404c:	3fc90f80 	.word	0x3fc90f80
 8004050:	3fc90fd0 	.word	0x3fc90fd0
 8004054:	37354400 	.word	0x37354400
 8004058:	37354443 	.word	0x37354443
 800405c:	2e85a308 	.word	0x2e85a308
 8004060:	43490f80 	.word	0x43490f80
 8004064:	3f22f984 	.word	0x3f22f984
 8004068:	08004860 	.word	0x08004860
 800406c:	2e85a300 	.word	0x2e85a300
 8004070:	248d3132 	.word	0x248d3132
 8004074:	43800000 	.word	0x43800000
 8004078:	080048e0 	.word	0x080048e0

0800407c <__kernel_cosf>:
 800407c:	ee10 3a10 	vmov	r3, s0
 8004080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004084:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800408c:	da05      	bge.n	800409a <__kernel_cosf+0x1e>
 800408e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004092:	ee17 2a90 	vmov	r2, s15
 8004096:	2a00      	cmp	r2, #0
 8004098:	d03b      	beq.n	8004112 <__kernel_cosf+0x96>
 800409a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800409e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004118 <__kernel_cosf+0x9c>
 80040a6:	4a1d      	ldr	r2, [pc, #116]	; (800411c <__kernel_cosf+0xa0>)
 80040a8:	ee66 7a07 	vmul.f32	s15, s12, s14
 80040ac:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004120 <__kernel_cosf+0xa4>
 80040b0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80040b4:	4293      	cmp	r3, r2
 80040b6:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8004124 <__kernel_cosf+0xa8>
 80040ba:	eee7 5a06 	vfma.f32	s11, s14, s12
 80040be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004128 <__kernel_cosf+0xac>
 80040c2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80040c6:	eddf 5a19 	vldr	s11, [pc, #100]	; 800412c <__kernel_cosf+0xb0>
 80040ca:	eee7 5a06 	vfma.f32	s11, s14, s12
 80040ce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004130 <__kernel_cosf+0xb4>
 80040d2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80040d6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80040da:	ee27 7a06 	vmul.f32	s14, s14, s12
 80040de:	eee6 0a07 	vfma.f32	s1, s12, s14
 80040e2:	dc04      	bgt.n	80040ee <__kernel_cosf+0x72>
 80040e4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80040e8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80040ec:	4770      	bx	lr
 80040ee:	4a11      	ldr	r2, [pc, #68]	; (8004134 <__kernel_cosf+0xb8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bfda      	itte	le
 80040f4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80040f8:	ee07 3a10 	vmovle	s14, r3
 80040fc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8004100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004104:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004108:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800410c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004110:	4770      	bx	lr
 8004112:	eeb0 0a66 	vmov.f32	s0, s13
 8004116:	4770      	bx	lr
 8004118:	ad47d74e 	.word	0xad47d74e
 800411c:	3e999999 	.word	0x3e999999
 8004120:	310f74f6 	.word	0x310f74f6
 8004124:	b493f27c 	.word	0xb493f27c
 8004128:	37d00d01 	.word	0x37d00d01
 800412c:	bab60b61 	.word	0xbab60b61
 8004130:	3d2aaaab 	.word	0x3d2aaaab
 8004134:	3f480000 	.word	0x3f480000

08004138 <__kernel_rem_pio2f>:
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	ed2d 8b04 	vpush	{d8-d9}
 8004140:	b0d7      	sub	sp, #348	; 0x15c
 8004142:	469b      	mov	fp, r3
 8004144:	460e      	mov	r6, r1
 8004146:	4bbe      	ldr	r3, [pc, #760]	; (8004440 <__kernel_rem_pio2f+0x308>)
 8004148:	9964      	ldr	r1, [sp, #400]	; 0x190
 800414a:	9002      	str	r0, [sp, #8]
 800414c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8004150:	9865      	ldr	r0, [sp, #404]	; 0x194
 8004152:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8004450 <__kernel_rem_pio2f+0x318>
 8004156:	1ed1      	subs	r1, r2, #3
 8004158:	2308      	movs	r3, #8
 800415a:	fb91 f1f3 	sdiv	r1, r1, r3
 800415e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004162:	f10b 3aff 	add.w	sl, fp, #4294967295
 8004166:	1c4c      	adds	r4, r1, #1
 8004168:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800416c:	eba1 050a 	sub.w	r5, r1, sl
 8004170:	aa1a      	add	r2, sp, #104	; 0x68
 8004172:	eb09 070a 	add.w	r7, r9, sl
 8004176:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800417a:	4696      	mov	lr, r2
 800417c:	2300      	movs	r3, #0
 800417e:	42bb      	cmp	r3, r7
 8004180:	dd0f      	ble.n	80041a2 <__kernel_rem_pio2f+0x6a>
 8004182:	af42      	add	r7, sp, #264	; 0x108
 8004184:	2200      	movs	r2, #0
 8004186:	454a      	cmp	r2, r9
 8004188:	dc27      	bgt.n	80041da <__kernel_rem_pio2f+0xa2>
 800418a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800418e:	eb0b 0302 	add.w	r3, fp, r2
 8004192:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8004196:	9d02      	ldr	r5, [sp, #8]
 8004198:	eddf 7aad 	vldr	s15, [pc, #692]	; 8004450 <__kernel_rem_pio2f+0x318>
 800419c:	f04f 0c00 	mov.w	ip, #0
 80041a0:	e015      	b.n	80041ce <__kernel_rem_pio2f+0x96>
 80041a2:	42dd      	cmn	r5, r3
 80041a4:	bf5d      	ittte	pl
 80041a6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80041aa:	ee07 2a90 	vmovpl	s15, r2
 80041ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80041b2:	eef0 7a47 	vmovmi.f32	s15, s14
 80041b6:	ecee 7a01 	vstmia	lr!, {s15}
 80041ba:	3301      	adds	r3, #1
 80041bc:	e7df      	b.n	800417e <__kernel_rem_pio2f+0x46>
 80041be:	ecf5 6a01 	vldmia	r5!, {s13}
 80041c2:	ed33 7a01 	vldmdb	r3!, {s14}
 80041c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80041ca:	f10c 0c01 	add.w	ip, ip, #1
 80041ce:	45d4      	cmp	ip, sl
 80041d0:	ddf5      	ble.n	80041be <__kernel_rem_pio2f+0x86>
 80041d2:	ece7 7a01 	vstmia	r7!, {s15}
 80041d6:	3201      	adds	r2, #1
 80041d8:	e7d5      	b.n	8004186 <__kernel_rem_pio2f+0x4e>
 80041da:	ab06      	add	r3, sp, #24
 80041dc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80041e0:	9304      	str	r3, [sp, #16]
 80041e2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800444c <__kernel_rem_pio2f+0x314>
 80041e6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8004448 <__kernel_rem_pio2f+0x310>
 80041ea:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	464d      	mov	r5, r9
 80041f2:	ab56      	add	r3, sp, #344	; 0x158
 80041f4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80041f8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80041fc:	3f01      	subs	r7, #1
 80041fe:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8004202:	00bf      	lsls	r7, r7, #2
 8004204:	ab56      	add	r3, sp, #344	; 0x158
 8004206:	19da      	adds	r2, r3, r7
 8004208:	3a4c      	subs	r2, #76	; 0x4c
 800420a:	2300      	movs	r3, #0
 800420c:	1ae9      	subs	r1, r5, r3
 800420e:	2900      	cmp	r1, #0
 8004210:	dc4c      	bgt.n	80042ac <__kernel_rem_pio2f+0x174>
 8004212:	4620      	mov	r0, r4
 8004214:	f000 faa4 	bl	8004760 <scalbnf>
 8004218:	eeb0 8a40 	vmov.f32	s16, s0
 800421c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004220:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004224:	f000 fa5a 	bl	80046dc <floorf>
 8004228:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800422c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004230:	2c00      	cmp	r4, #0
 8004232:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004236:	edcd 7a01 	vstr	s15, [sp, #4]
 800423a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800423e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004242:	dd48      	ble.n	80042d6 <__kernel_rem_pio2f+0x19e>
 8004244:	1e69      	subs	r1, r5, #1
 8004246:	ab06      	add	r3, sp, #24
 8004248:	f1c4 0008 	rsb	r0, r4, #8
 800424c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8004250:	9a01      	ldr	r2, [sp, #4]
 8004252:	fa4c f300 	asr.w	r3, ip, r0
 8004256:	441a      	add	r2, r3
 8004258:	4083      	lsls	r3, r0
 800425a:	9201      	str	r2, [sp, #4]
 800425c:	ebac 0203 	sub.w	r2, ip, r3
 8004260:	ab06      	add	r3, sp, #24
 8004262:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004266:	f1c4 0307 	rsb	r3, r4, #7
 800426a:	fa42 f803 	asr.w	r8, r2, r3
 800426e:	f1b8 0f00 	cmp.w	r8, #0
 8004272:	dd41      	ble.n	80042f8 <__kernel_rem_pio2f+0x1c0>
 8004274:	9b01      	ldr	r3, [sp, #4]
 8004276:	2000      	movs	r0, #0
 8004278:	3301      	adds	r3, #1
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	4601      	mov	r1, r0
 800427e:	4285      	cmp	r5, r0
 8004280:	dc6d      	bgt.n	800435e <__kernel_rem_pio2f+0x226>
 8004282:	2c00      	cmp	r4, #0
 8004284:	dd04      	ble.n	8004290 <__kernel_rem_pio2f+0x158>
 8004286:	2c01      	cmp	r4, #1
 8004288:	d07e      	beq.n	8004388 <__kernel_rem_pio2f+0x250>
 800428a:	2c02      	cmp	r4, #2
 800428c:	f000 8086 	beq.w	800439c <__kernel_rem_pio2f+0x264>
 8004290:	f1b8 0f02 	cmp.w	r8, #2
 8004294:	d130      	bne.n	80042f8 <__kernel_rem_pio2f+0x1c0>
 8004296:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800429a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800429e:	b359      	cbz	r1, 80042f8 <__kernel_rem_pio2f+0x1c0>
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 fa5d 	bl	8004760 <scalbnf>
 80042a6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80042aa:	e025      	b.n	80042f8 <__kernel_rem_pio2f+0x1c0>
 80042ac:	ee60 7a28 	vmul.f32	s15, s0, s17
 80042b0:	a806      	add	r0, sp, #24
 80042b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80042be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80042c2:	ee10 1a10 	vmov	r1, s0
 80042c6:	ed32 0a01 	vldmdb	r2!, {s0}
 80042ca:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80042ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 80042d2:	3301      	adds	r3, #1
 80042d4:	e79a      	b.n	800420c <__kernel_rem_pio2f+0xd4>
 80042d6:	d106      	bne.n	80042e6 <__kernel_rem_pio2f+0x1ae>
 80042d8:	1e6b      	subs	r3, r5, #1
 80042da:	aa06      	add	r2, sp, #24
 80042dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042e0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80042e4:	e7c3      	b.n	800426e <__kernel_rem_pio2f+0x136>
 80042e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80042ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80042ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f2:	da31      	bge.n	8004358 <__kernel_rem_pio2f+0x220>
 80042f4:	f04f 0800 	mov.w	r8, #0
 80042f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	f040 80a8 	bne.w	8004454 <__kernel_rem_pio2f+0x31c>
 8004304:	1e6b      	subs	r3, r5, #1
 8004306:	4618      	mov	r0, r3
 8004308:	2200      	movs	r2, #0
 800430a:	4548      	cmp	r0, r9
 800430c:	da4d      	bge.n	80043aa <__kernel_rem_pio2f+0x272>
 800430e:	2a00      	cmp	r2, #0
 8004310:	f000 8087 	beq.w	8004422 <__kernel_rem_pio2f+0x2ea>
 8004314:	aa06      	add	r2, sp, #24
 8004316:	3c08      	subs	r4, #8
 8004318:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800431c:	2900      	cmp	r1, #0
 800431e:	f000 808d 	beq.w	800443c <__kernel_rem_pio2f+0x304>
 8004322:	4620      	mov	r0, r4
 8004324:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	f000 fa19 	bl	8004760 <scalbnf>
 800432e:	9b02      	ldr	r3, [sp, #8]
 8004330:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800444c <__kernel_rem_pio2f+0x314>
 8004334:	0099      	lsls	r1, r3, #2
 8004336:	aa42      	add	r2, sp, #264	; 0x108
 8004338:	1850      	adds	r0, r2, r1
 800433a:	1d05      	adds	r5, r0, #4
 800433c:	461c      	mov	r4, r3
 800433e:	2c00      	cmp	r4, #0
 8004340:	f280 80b8 	bge.w	80044b4 <__kernel_rem_pio2f+0x37c>
 8004344:	2500      	movs	r5, #0
 8004346:	1b5c      	subs	r4, r3, r5
 8004348:	2c00      	cmp	r4, #0
 800434a:	f2c0 80d8 	blt.w	80044fe <__kernel_rem_pio2f+0x3c6>
 800434e:	4f3d      	ldr	r7, [pc, #244]	; (8004444 <__kernel_rem_pio2f+0x30c>)
 8004350:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8004450 <__kernel_rem_pio2f+0x318>
 8004354:	2400      	movs	r4, #0
 8004356:	e0c6      	b.n	80044e6 <__kernel_rem_pio2f+0x3ae>
 8004358:	f04f 0802 	mov.w	r8, #2
 800435c:	e78a      	b.n	8004274 <__kernel_rem_pio2f+0x13c>
 800435e:	ab06      	add	r3, sp, #24
 8004360:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004364:	b949      	cbnz	r1, 800437a <__kernel_rem_pio2f+0x242>
 8004366:	b12b      	cbz	r3, 8004374 <__kernel_rem_pio2f+0x23c>
 8004368:	aa06      	add	r2, sp, #24
 800436a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800436e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004372:	2301      	movs	r3, #1
 8004374:	3001      	adds	r0, #1
 8004376:	4619      	mov	r1, r3
 8004378:	e781      	b.n	800427e <__kernel_rem_pio2f+0x146>
 800437a:	aa06      	add	r2, sp, #24
 800437c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004380:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004384:	460b      	mov	r3, r1
 8004386:	e7f5      	b.n	8004374 <__kernel_rem_pio2f+0x23c>
 8004388:	1e68      	subs	r0, r5, #1
 800438a:	ab06      	add	r3, sp, #24
 800438c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004394:	aa06      	add	r2, sp, #24
 8004396:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800439a:	e779      	b.n	8004290 <__kernel_rem_pio2f+0x158>
 800439c:	1e68      	subs	r0, r5, #1
 800439e:	ab06      	add	r3, sp, #24
 80043a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80043a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a8:	e7f4      	b.n	8004394 <__kernel_rem_pio2f+0x25c>
 80043aa:	a906      	add	r1, sp, #24
 80043ac:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80043b0:	3801      	subs	r0, #1
 80043b2:	430a      	orrs	r2, r1
 80043b4:	e7a9      	b.n	800430a <__kernel_rem_pio2f+0x1d2>
 80043b6:	f10c 0c01 	add.w	ip, ip, #1
 80043ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80043be:	2a00      	cmp	r2, #0
 80043c0:	d0f9      	beq.n	80043b6 <__kernel_rem_pio2f+0x27e>
 80043c2:	eb0b 0305 	add.w	r3, fp, r5
 80043c6:	aa1a      	add	r2, sp, #104	; 0x68
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	1898      	adds	r0, r3, r2
 80043cc:	3004      	adds	r0, #4
 80043ce:	1c69      	adds	r1, r5, #1
 80043d0:	3704      	adds	r7, #4
 80043d2:	2200      	movs	r2, #0
 80043d4:	4465      	add	r5, ip
 80043d6:	9005      	str	r0, [sp, #20]
 80043d8:	428d      	cmp	r5, r1
 80043da:	f6ff af0a 	blt.w	80041f2 <__kernel_rem_pio2f+0xba>
 80043de:	a81a      	add	r0, sp, #104	; 0x68
 80043e0:	eb02 0c03 	add.w	ip, r2, r3
 80043e4:	4484      	add	ip, r0
 80043e6:	9803      	ldr	r0, [sp, #12]
 80043e8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80043ec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80043f0:	9001      	str	r0, [sp, #4]
 80043f2:	ee07 0a90 	vmov	s15, r0
 80043f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043fa:	9805      	ldr	r0, [sp, #20]
 80043fc:	edcc 7a00 	vstr	s15, [ip]
 8004400:	eddf 7a13 	vldr	s15, [pc, #76]	; 8004450 <__kernel_rem_pio2f+0x318>
 8004404:	eb00 0802 	add.w	r8, r0, r2
 8004408:	f04f 0c00 	mov.w	ip, #0
 800440c:	45d4      	cmp	ip, sl
 800440e:	dd0c      	ble.n	800442a <__kernel_rem_pio2f+0x2f2>
 8004410:	eb02 0c07 	add.w	ip, r2, r7
 8004414:	a842      	add	r0, sp, #264	; 0x108
 8004416:	4484      	add	ip, r0
 8004418:	edcc 7a01 	vstr	s15, [ip, #4]
 800441c:	3101      	adds	r1, #1
 800441e:	3204      	adds	r2, #4
 8004420:	e7da      	b.n	80043d8 <__kernel_rem_pio2f+0x2a0>
 8004422:	9b04      	ldr	r3, [sp, #16]
 8004424:	f04f 0c01 	mov.w	ip, #1
 8004428:	e7c7      	b.n	80043ba <__kernel_rem_pio2f+0x282>
 800442a:	ecfe 6a01 	vldmia	lr!, {s13}
 800442e:	ed38 7a01 	vldmdb	r8!, {s14}
 8004432:	f10c 0c01 	add.w	ip, ip, #1
 8004436:	eee6 7a87 	vfma.f32	s15, s13, s14
 800443a:	e7e7      	b.n	800440c <__kernel_rem_pio2f+0x2d4>
 800443c:	3b01      	subs	r3, #1
 800443e:	e769      	b.n	8004314 <__kernel_rem_pio2f+0x1dc>
 8004440:	08004c24 	.word	0x08004c24
 8004444:	08004bf8 	.word	0x08004bf8
 8004448:	43800000 	.word	0x43800000
 800444c:	3b800000 	.word	0x3b800000
 8004450:	00000000 	.word	0x00000000
 8004454:	4260      	negs	r0, r4
 8004456:	eeb0 0a48 	vmov.f32	s0, s16
 800445a:	f000 f981 	bl	8004760 <scalbnf>
 800445e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8004448 <__kernel_rem_pio2f+0x310>
 8004462:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	db1a      	blt.n	80044a2 <__kernel_rem_pio2f+0x36a>
 800446c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800444c <__kernel_rem_pio2f+0x314>
 8004470:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004474:	aa06      	add	r2, sp, #24
 8004476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800447a:	a906      	add	r1, sp, #24
 800447c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004480:	3408      	adds	r4, #8
 8004482:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800448a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800448e:	ee10 3a10 	vmov	r3, s0
 8004492:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8004496:	1c6b      	adds	r3, r5, #1
 8004498:	ee17 2a90 	vmov	r2, s15
 800449c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80044a0:	e73f      	b.n	8004322 <__kernel_rem_pio2f+0x1ea>
 80044a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80044a6:	aa06      	add	r2, sp, #24
 80044a8:	ee10 3a10 	vmov	r3, s0
 80044ac:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80044b0:	462b      	mov	r3, r5
 80044b2:	e736      	b.n	8004322 <__kernel_rem_pio2f+0x1ea>
 80044b4:	aa06      	add	r2, sp, #24
 80044b6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80044ba:	9202      	str	r2, [sp, #8]
 80044bc:	ee07 2a90 	vmov	s15, r2
 80044c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c4:	3c01      	subs	r4, #1
 80044c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80044ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 80044ce:	ed65 7a01 	vstmdb	r5!, {s15}
 80044d2:	e734      	b.n	800433e <__kernel_rem_pio2f+0x206>
 80044d4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80044d8:	ecf7 6a01 	vldmia	r7!, {s13}
 80044dc:	ed9c 7a00 	vldr	s14, [ip]
 80044e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80044e4:	3401      	adds	r4, #1
 80044e6:	454c      	cmp	r4, r9
 80044e8:	dc01      	bgt.n	80044ee <__kernel_rem_pio2f+0x3b6>
 80044ea:	42a5      	cmp	r5, r4
 80044ec:	daf2      	bge.n	80044d4 <__kernel_rem_pio2f+0x39c>
 80044ee:	aa56      	add	r2, sp, #344	; 0x158
 80044f0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80044f4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80044f8:	3501      	adds	r5, #1
 80044fa:	3804      	subs	r0, #4
 80044fc:	e723      	b.n	8004346 <__kernel_rem_pio2f+0x20e>
 80044fe:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004500:	2a03      	cmp	r2, #3
 8004502:	d84d      	bhi.n	80045a0 <__kernel_rem_pio2f+0x468>
 8004504:	e8df f002 	tbb	[pc, r2]
 8004508:	021f1f3e 	.word	0x021f1f3e
 800450c:	aa56      	add	r2, sp, #344	; 0x158
 800450e:	4411      	add	r1, r2
 8004510:	399c      	subs	r1, #156	; 0x9c
 8004512:	4608      	mov	r0, r1
 8004514:	461c      	mov	r4, r3
 8004516:	2c00      	cmp	r4, #0
 8004518:	dc5f      	bgt.n	80045da <__kernel_rem_pio2f+0x4a2>
 800451a:	4608      	mov	r0, r1
 800451c:	461c      	mov	r4, r3
 800451e:	2c01      	cmp	r4, #1
 8004520:	dc6b      	bgt.n	80045fa <__kernel_rem_pio2f+0x4c2>
 8004522:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8004450 <__kernel_rem_pio2f+0x318>
 8004526:	2b01      	cmp	r3, #1
 8004528:	dc77      	bgt.n	800461a <__kernel_rem_pio2f+0x4e2>
 800452a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800452e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004532:	f1b8 0f00 	cmp.w	r8, #0
 8004536:	d176      	bne.n	8004626 <__kernel_rem_pio2f+0x4ee>
 8004538:	edc6 6a00 	vstr	s13, [r6]
 800453c:	ed86 7a01 	vstr	s14, [r6, #4]
 8004540:	edc6 7a02 	vstr	s15, [r6, #8]
 8004544:	e02c      	b.n	80045a0 <__kernel_rem_pio2f+0x468>
 8004546:	aa56      	add	r2, sp, #344	; 0x158
 8004548:	4411      	add	r1, r2
 800454a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8004450 <__kernel_rem_pio2f+0x318>
 800454e:	399c      	subs	r1, #156	; 0x9c
 8004550:	4618      	mov	r0, r3
 8004552:	2800      	cmp	r0, #0
 8004554:	da32      	bge.n	80045bc <__kernel_rem_pio2f+0x484>
 8004556:	f1b8 0f00 	cmp.w	r8, #0
 800455a:	d035      	beq.n	80045c8 <__kernel_rem_pio2f+0x490>
 800455c:	eef1 7a47 	vneg.f32	s15, s14
 8004560:	edc6 7a00 	vstr	s15, [r6]
 8004564:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8004568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800456c:	a82f      	add	r0, sp, #188	; 0xbc
 800456e:	2101      	movs	r1, #1
 8004570:	428b      	cmp	r3, r1
 8004572:	da2c      	bge.n	80045ce <__kernel_rem_pio2f+0x496>
 8004574:	f1b8 0f00 	cmp.w	r8, #0
 8004578:	d001      	beq.n	800457e <__kernel_rem_pio2f+0x446>
 800457a:	eef1 7a67 	vneg.f32	s15, s15
 800457e:	edc6 7a01 	vstr	s15, [r6, #4]
 8004582:	e00d      	b.n	80045a0 <__kernel_rem_pio2f+0x468>
 8004584:	aa56      	add	r2, sp, #344	; 0x158
 8004586:	4411      	add	r1, r2
 8004588:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8004450 <__kernel_rem_pio2f+0x318>
 800458c:	399c      	subs	r1, #156	; 0x9c
 800458e:	2b00      	cmp	r3, #0
 8004590:	da0e      	bge.n	80045b0 <__kernel_rem_pio2f+0x478>
 8004592:	f1b8 0f00 	cmp.w	r8, #0
 8004596:	d001      	beq.n	800459c <__kernel_rem_pio2f+0x464>
 8004598:	eef1 7a67 	vneg.f32	s15, s15
 800459c:	edc6 7a00 	vstr	s15, [r6]
 80045a0:	9b01      	ldr	r3, [sp, #4]
 80045a2:	f003 0007 	and.w	r0, r3, #7
 80045a6:	b057      	add	sp, #348	; 0x15c
 80045a8:	ecbd 8b04 	vpop	{d8-d9}
 80045ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b0:	ed31 7a01 	vldmdb	r1!, {s14}
 80045b4:	3b01      	subs	r3, #1
 80045b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045ba:	e7e8      	b.n	800458e <__kernel_rem_pio2f+0x456>
 80045bc:	ed71 7a01 	vldmdb	r1!, {s15}
 80045c0:	3801      	subs	r0, #1
 80045c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045c6:	e7c4      	b.n	8004552 <__kernel_rem_pio2f+0x41a>
 80045c8:	eef0 7a47 	vmov.f32	s15, s14
 80045cc:	e7c8      	b.n	8004560 <__kernel_rem_pio2f+0x428>
 80045ce:	ecb0 7a01 	vldmia	r0!, {s14}
 80045d2:	3101      	adds	r1, #1
 80045d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045d8:	e7ca      	b.n	8004570 <__kernel_rem_pio2f+0x438>
 80045da:	ed50 7a02 	vldr	s15, [r0, #-8]
 80045de:	ed70 6a01 	vldmdb	r0!, {s13}
 80045e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80045e6:	3c01      	subs	r4, #1
 80045e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045ec:	ed00 7a01 	vstr	s14, [r0, #-4]
 80045f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f4:	edc0 7a00 	vstr	s15, [r0]
 80045f8:	e78d      	b.n	8004516 <__kernel_rem_pio2f+0x3de>
 80045fa:	ed50 7a02 	vldr	s15, [r0, #-8]
 80045fe:	ed70 6a01 	vldmdb	r0!, {s13}
 8004602:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004606:	3c01      	subs	r4, #1
 8004608:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800460c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8004610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004614:	edc0 7a00 	vstr	s15, [r0]
 8004618:	e781      	b.n	800451e <__kernel_rem_pio2f+0x3e6>
 800461a:	ed31 7a01 	vldmdb	r1!, {s14}
 800461e:	3b01      	subs	r3, #1
 8004620:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004624:	e77f      	b.n	8004526 <__kernel_rem_pio2f+0x3ee>
 8004626:	eef1 6a66 	vneg.f32	s13, s13
 800462a:	eeb1 7a47 	vneg.f32	s14, s14
 800462e:	edc6 6a00 	vstr	s13, [r6]
 8004632:	ed86 7a01 	vstr	s14, [r6, #4]
 8004636:	eef1 7a67 	vneg.f32	s15, s15
 800463a:	e781      	b.n	8004540 <__kernel_rem_pio2f+0x408>

0800463c <__kernel_sinf>:
 800463c:	ee10 3a10 	vmov	r3, s0
 8004640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004644:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004648:	da04      	bge.n	8004654 <__kernel_sinf+0x18>
 800464a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800464e:	ee17 3a90 	vmov	r3, s15
 8004652:	b35b      	cbz	r3, 80046ac <__kernel_sinf+0x70>
 8004654:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004658:	eddf 7a15 	vldr	s15, [pc, #84]	; 80046b0 <__kernel_sinf+0x74>
 800465c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80046b4 <__kernel_sinf+0x78>
 8004660:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004664:	eddf 7a14 	vldr	s15, [pc, #80]	; 80046b8 <__kernel_sinf+0x7c>
 8004668:	eee6 7a07 	vfma.f32	s15, s12, s14
 800466c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80046bc <__kernel_sinf+0x80>
 8004670:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004674:	eddf 7a12 	vldr	s15, [pc, #72]	; 80046c0 <__kernel_sinf+0x84>
 8004678:	ee60 6a07 	vmul.f32	s13, s0, s14
 800467c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004680:	b930      	cbnz	r0, 8004690 <__kernel_sinf+0x54>
 8004682:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80046c4 <__kernel_sinf+0x88>
 8004686:	eea7 6a27 	vfma.f32	s12, s14, s15
 800468a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800468e:	4770      	bx	lr
 8004690:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004694:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004698:	eee0 7a86 	vfma.f32	s15, s1, s12
 800469c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80046a0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80046c8 <__kernel_sinf+0x8c>
 80046a4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80046a8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2f2ec9d3 	.word	0x2f2ec9d3
 80046b4:	b2d72f34 	.word	0xb2d72f34
 80046b8:	3638ef1b 	.word	0x3638ef1b
 80046bc:	b9500d01 	.word	0xb9500d01
 80046c0:	3c088889 	.word	0x3c088889
 80046c4:	be2aaaab 	.word	0xbe2aaaab
 80046c8:	3e2aaaab 	.word	0x3e2aaaab

080046cc <fabsf>:
 80046cc:	ee10 3a10 	vmov	r3, s0
 80046d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046d4:	ee00 3a10 	vmov	s0, r3
 80046d8:	4770      	bx	lr
	...

080046dc <floorf>:
 80046dc:	ee10 3a10 	vmov	r3, s0
 80046e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046e4:	0dca      	lsrs	r2, r1, #23
 80046e6:	3a7f      	subs	r2, #127	; 0x7f
 80046e8:	2a16      	cmp	r2, #22
 80046ea:	dc2a      	bgt.n	8004742 <floorf+0x66>
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	da11      	bge.n	8004714 <floorf+0x38>
 80046f0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004754 <floorf+0x78>
 80046f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80046f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	dd05      	ble.n	800470e <floorf+0x32>
 8004702:	2b00      	cmp	r3, #0
 8004704:	da23      	bge.n	800474e <floorf+0x72>
 8004706:	4a14      	ldr	r2, [pc, #80]	; (8004758 <floorf+0x7c>)
 8004708:	2900      	cmp	r1, #0
 800470a:	bf18      	it	ne
 800470c:	4613      	movne	r3, r2
 800470e:	ee00 3a10 	vmov	s0, r3
 8004712:	4770      	bx	lr
 8004714:	4911      	ldr	r1, [pc, #68]	; (800475c <floorf+0x80>)
 8004716:	4111      	asrs	r1, r2
 8004718:	420b      	tst	r3, r1
 800471a:	d0fa      	beq.n	8004712 <floorf+0x36>
 800471c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004754 <floorf+0x78>
 8004720:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004724:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472c:	ddef      	ble.n	800470e <floorf+0x32>
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfbe      	ittt	lt
 8004732:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004736:	fa40 f202 	asrlt.w	r2, r0, r2
 800473a:	189b      	addlt	r3, r3, r2
 800473c:	ea23 0301 	bic.w	r3, r3, r1
 8004740:	e7e5      	b.n	800470e <floorf+0x32>
 8004742:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004746:	d3e4      	bcc.n	8004712 <floorf+0x36>
 8004748:	ee30 0a00 	vadd.f32	s0, s0, s0
 800474c:	4770      	bx	lr
 800474e:	2300      	movs	r3, #0
 8004750:	e7dd      	b.n	800470e <floorf+0x32>
 8004752:	bf00      	nop
 8004754:	7149f2ca 	.word	0x7149f2ca
 8004758:	bf800000 	.word	0xbf800000
 800475c:	007fffff 	.word	0x007fffff

08004760 <scalbnf>:
 8004760:	b508      	push	{r3, lr}
 8004762:	ee10 2a10 	vmov	r2, s0
 8004766:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800476a:	ed2d 8b02 	vpush	{d8}
 800476e:	eef0 0a40 	vmov.f32	s1, s0
 8004772:	d004      	beq.n	800477e <scalbnf+0x1e>
 8004774:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004778:	d306      	bcc.n	8004788 <scalbnf+0x28>
 800477a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800477e:	ecbd 8b02 	vpop	{d8}
 8004782:	eeb0 0a60 	vmov.f32	s0, s1
 8004786:	bd08      	pop	{r3, pc}
 8004788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800478c:	d21c      	bcs.n	80047c8 <scalbnf+0x68>
 800478e:	4b1f      	ldr	r3, [pc, #124]	; (800480c <scalbnf+0xac>)
 8004790:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004810 <scalbnf+0xb0>
 8004794:	4298      	cmp	r0, r3
 8004796:	ee60 0a27 	vmul.f32	s1, s0, s15
 800479a:	db10      	blt.n	80047be <scalbnf+0x5e>
 800479c:	ee10 2a90 	vmov	r2, s1
 80047a0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80047a4:	3b19      	subs	r3, #25
 80047a6:	4403      	add	r3, r0
 80047a8:	2bfe      	cmp	r3, #254	; 0xfe
 80047aa:	dd0f      	ble.n	80047cc <scalbnf+0x6c>
 80047ac:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8004814 <scalbnf+0xb4>
 80047b0:	eeb0 0a48 	vmov.f32	s0, s16
 80047b4:	f000 f834 	bl	8004820 <copysignf>
 80047b8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80047bc:	e7df      	b.n	800477e <scalbnf+0x1e>
 80047be:	eddf 7a16 	vldr	s15, [pc, #88]	; 8004818 <scalbnf+0xb8>
 80047c2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80047c6:	e7da      	b.n	800477e <scalbnf+0x1e>
 80047c8:	0ddb      	lsrs	r3, r3, #23
 80047ca:	e7ec      	b.n	80047a6 <scalbnf+0x46>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	dd06      	ble.n	80047de <scalbnf+0x7e>
 80047d0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80047d4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80047d8:	ee00 3a90 	vmov	s1, r3
 80047dc:	e7cf      	b.n	800477e <scalbnf+0x1e>
 80047de:	f113 0f16 	cmn.w	r3, #22
 80047e2:	da06      	bge.n	80047f2 <scalbnf+0x92>
 80047e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80047e8:	4298      	cmp	r0, r3
 80047ea:	dcdf      	bgt.n	80047ac <scalbnf+0x4c>
 80047ec:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8004818 <scalbnf+0xb8>
 80047f0:	e7de      	b.n	80047b0 <scalbnf+0x50>
 80047f2:	3319      	adds	r3, #25
 80047f4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80047f8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80047fc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800481c <scalbnf+0xbc>
 8004800:	ee07 3a10 	vmov	s14, r3
 8004804:	ee67 0a27 	vmul.f32	s1, s14, s15
 8004808:	e7b9      	b.n	800477e <scalbnf+0x1e>
 800480a:	bf00      	nop
 800480c:	ffff3cb0 	.word	0xffff3cb0
 8004810:	4c000000 	.word	0x4c000000
 8004814:	7149f2ca 	.word	0x7149f2ca
 8004818:	0da24260 	.word	0x0da24260
 800481c:	33000000 	.word	0x33000000

08004820 <copysignf>:
 8004820:	ee10 3a10 	vmov	r3, s0
 8004824:	ee10 2a90 	vmov	r2, s1
 8004828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800482c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004830:	4313      	orrs	r3, r2
 8004832:	ee00 3a10 	vmov	s0, r3
 8004836:	4770      	bx	lr

08004838 <_init>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr

08004844 <_fini>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr
